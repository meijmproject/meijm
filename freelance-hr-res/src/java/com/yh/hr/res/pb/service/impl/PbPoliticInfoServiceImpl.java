/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-13
**/
package com.yh.hr.res.pb.service.impl;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.yh.hr.res.pb.dto.PbPoliticInfoDTO;
import org.springframework.util.CollectionUtils;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.pb.bo.PbPoliticInfo;
import com.yh.hr.res.pb.queryhelper.PbPoliticInfoQueryHelper;
import com.yh.hr.res.pb.service.PbPoliticInfoService;
import com.yh.platform.core.dao.DaoUtil;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;

public class PbPoliticInfoServiceImpl implements PbPoliticInfoService{
	public void create(PbPoliticInfoDTO pbPoliticInfoDto) throws ServiceException {
		PbPoliticInfo pbPoliticInfo = new PbPoliticInfo();
		BeanHelper.copyProperties(pbPoliticInfoDto, pbPoliticInfo);
        pbPoliticInfo.save();
        //同步政治面貌信息到附属信息表
        PersonAttachInfoServiceUtil.sysPbPoliticInfo(pbPoliticInfo.getPersonOid());
	}

	public PbPoliticInfoDTO get(java.lang.Long pbPoliticInfoId) throws ServiceException {
        return BeanHelper.copyProperties(DaoUtil.get(PbPoliticInfo.class, pbPoliticInfoId),PbPoliticInfoDTO.class);
	}
    
	public void update(PbPoliticInfoDTO pbPoliticInfoDto) throws ServiceException {

		PbPoliticInfo pbPoliticInfo = new PbPoliticInfo();
		BeanHelper.copyProperties(pbPoliticInfoDto, pbPoliticInfo);
		pbPoliticInfo.update();
		 //同步政治面貌信息到附属信息表
        PersonAttachInfoServiceUtil.sysPbPoliticInfo(pbPoliticInfo.getPersonOid());
	}
    
	public void delete(java.lang.Long pbPoliticInfoId) throws ServiceException {
		PbPoliticInfo bo = DaoUtil.get(PbPoliticInfo.class, pbPoliticInfoId);
		Long personOid = bo.getPersonOid();
		bo.delete();
		 //同步政治面貌信息到附属信息表
        PersonAttachInfoServiceUtil.sysPbPoliticInfo(personOid);
	}
    
	public List<PbPoliticInfoDTO> find(TableTagBean ttb) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        HashMap<String, Object> hqlParams = new HashMap<String, Object>();
        PbPoliticInfoQueryHelper.buildHQL(ttb.getCondition(), hql, hqlParams);
        String order = ttb.getOrderBy();
        if (order != null) {
            if (ttb.getAsc()) {
                hql.append(" order by " + order + " asc");
            } else {
                hql.append(" order by " + order + " desc");
            }
        }
        List<PbPoliticInfoDTO> list = new ArrayList<PbPoliticInfoDTO>();
        List<PbPoliticInfo> boList = DaoUtil.listByCondition(hql.toString(), hqlParams, ttb.getPage() * ttb.getPageSize(), ttb.getPageSize());
		if(!CollectionUtils.isEmpty(boList))
		{
			for(PbPoliticInfo bo : boList)
			{
				PbPoliticInfoDTO dto = new PbPoliticInfoDTO();
				BeanHelper.copyProperties(bo, dto);
				list.add(dto);
			}
		}
        ttb.setList(list);
        ttb.setTotal(DaoUtil.countByCondition("select count(*) "+hql, hqlParams));
        return list;
	}

	public void deleteByPersonOid(Long personOid) throws ServiceException {
		PbPoliticInfoQueryHelper.deleteByPersonOid(personOid);
	}

	public List<PbPoliticInfoDTO> listPoliticInfo(Long personOid)
			throws ServiceException {
		return PbPoliticInfoQueryHelper.listPoliticInfo(personOid);
	}

}