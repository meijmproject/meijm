/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.res.pb.service.impl;

import com.yh.hr.res.pb.bo.PbSyGwEmployInfo;
import com.yh.hr.res.pb.dto.PbSyGwEmployInfoDTO;
import jade.workflow.utils.ObjectUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.lang.StringUtils;
import org.springframework.util.CollectionUtils;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.queryhelper.PbSyGwEmployInfoQueryHelper;
import com.yh.hr.res.pb.service.PbSyGwEmployInfoService;
import com.yh.hr.res.unit.service.UtOrgService;
import com.yh.hr.res.unit.service.UtUnitService;
import com.yh.platform.core.dao.DaoUtil;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringMap;

public class PbSyGwEmployInfoServiceImpl implements PbSyGwEmployInfoService{
	private UtUnitService utUnitService = (UtUnitService) SpringBeanUtil.getBean("utUnitService");
	private UtOrgService utOrgService = (UtOrgService) SpringBeanUtil.getBean("utOrgService");
	
	
	public void create(PbSyGwEmployInfoDTO pbSyGwEmployInfoDto) throws ServiceException {
		PbSyGwEmployInfo pbSyGwEmployInfo = new PbSyGwEmployInfo();
		BeanHelper.copyProperties(pbSyGwEmployInfoDto, pbSyGwEmployInfo);
        pbSyGwEmployInfo.save();
      //在聘
		if(DicConstants.YHRS0026_001.equals(pbSyGwEmployInfo.getPositioningStatus()))
		{
			//同步到人员附属信息表
			PersonAttachInfoServiceUtil.sysPbSyGwEmployInfo(pbSyGwEmployInfo.getPersonOid());
		}
	}

	public PbSyGwEmployInfoDTO get(java.lang.Long pbSyGwEmployInfoId) throws ServiceException {
        return BeanHelper.copyProperties(DaoUtil.get(PbSyGwEmployInfo.class, pbSyGwEmployInfoId),PbSyGwEmployInfoDTO.class);
	}
    
	public void update(PbSyGwEmployInfoDTO pbSyGwEmployInfoDto) throws ServiceException {

		PbSyGwEmployInfo pbSyGwEmployInfo = new PbSyGwEmployInfo();
		BeanHelper.copyProperties(pbSyGwEmployInfoDto, pbSyGwEmployInfo);
		pbSyGwEmployInfo.update();
		//同步到人员附属信息表
		PersonAttachInfoServiceUtil.sysPbSyGwEmployInfo(pbSyGwEmployInfo.getPersonOid());
	}
    
	public void delete(java.lang.Long pbSyGwEmployInfoId) throws ServiceException {
		PbSyGwEmployInfo bo = DaoUtil.get(PbSyGwEmployInfo.class, pbSyGwEmployInfoId);
        Long personOid = bo.getPersonOid();
		bo.delete();
		//同步到人员附属信息表
		PersonAttachInfoServiceUtil.sysPbSyGwEmployInfo(personOid);
	}
    
	public List<PbSyGwEmployInfoDTO> find(TableTagBean ttb) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        HashMap<String, Object> hqlParams = new HashMap<String, Object>();
        buildHQL(ttb.getCondition(), hql, hqlParams);
        String order = ttb.getOrderBy();
        if (order != null) {
            if (ttb.getAsc()) {
                hql.append(" order by " + order + " asc");
            } else {
                hql.append(" order by " + order + " desc");
            }
        }else{
        	hql.append(" order by positioningStatus asc");
        }
        List<PbSyGwEmployInfo> list = DaoUtil.listByCondition(hql.toString(), hqlParams, ttb.getPage() * ttb.getPageSize(), ttb.getPageSize());
		List<PbSyGwEmployInfoDTO> dtoList = new ArrayList<PbSyGwEmployInfoDTO>();
		if(!CollectionUtils.isEmpty(list))
		{
			for(PbSyGwEmployInfo bo : list)
			{
				PbSyGwEmployInfoDTO dto = new PbSyGwEmployInfoDTO();
				BeanHelper.copyProperties(bo, dto);
				dtoList.add(dto);
			}
		}
        ttb.setList(list);
        ttb.setTotal(DaoUtil.countByCondition("select count(*) "+hql, hqlParams));
        return dtoList;
	}

    public void buildHQL(StringMap params, StringBuilder hql, HashMap<String, Object> hqlParams) throws ServiceException {
        hql.append("from PbSyGwEmployInfo where 1=1");
        String personOid = params.getAsStringEmptyNull("personOid");
        if (personOid != null){
           	hql.append(" and personOid = :personOid");
           	try{
           		hqlParams.put("personOid", ObjectUtil.getValue(personOid, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
        String dutyUnitName = params.getAsStringEmptyNull("dutyUnitName");
        if (dutyUnitName != null){
           hql.append(" and dutyUnitName like :dutyUnitName");
           hqlParams.put("dutyUnitName", "%"+dutyUnitName.trim()+"%");
        }
        String dutyUnitOid = params.getAsStringEmptyNull("dutyUnitOid");
        if (dutyUnitOid != null){
           	hql.append(" and dutyUnitOid = :dutyUnitOid");
           	try{
           		hqlParams.put("dutyUnitOid", ObjectUtil.getValue(dutyUnitOid, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
        String deptName = params.getAsStringEmptyNull("deptName");
        if (deptName != null){
           hql.append(" and deptName like :deptName");
           hqlParams.put("deptName", "%"+deptName.trim()+"%");
        }
   }
    /*
     * (non-Javadoc)
     * @see PbSyGwEmployInfoService#check(PbSyGwEmployInfoDTO)
     */
	public String check(PbSyGwEmployInfoDTO pbSyGwEmployInfoDTO)
			throws ServiceException {
		//获得岗位聘任状态和岗位类别是否更改过的标识符
        //获得是否主岗位是否更改过的标识符
		if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getStatusFlag())&&pbSyGwEmployInfoDTO.getStatusFlag().equals("true"))
		{
			if(null==pbSyGwEmployInfoDTO.getPersonOid()){
				
				return "获取的人员Id为null！请刷新重试或联系开发人员！";
			}else if(null==pbSyGwEmployInfoDTO.getPositioningStatus()){
				
				return "获取的岗位聘任状态为空！请刷新重试或联系开发人员！";
			}else if(null==pbSyGwEmployInfoDTO.getPositionType()){
				
				return "获取的岗位类别为空！请刷新重试或联系开发人员！";
			}
			//在任(聘)的信息验证
			Boolean b1= PbSyGwEmployInfoQueryHelper.checkStatus(pbSyGwEmployInfoDTO);
			
			if(!b1){
				return "同一岗位类别在任(聘)的信息只能有一笔！";
			}
			//如果是双肩挑人员，验证只能是一笔在聘的管理岗，一笔在聘专技岗
			//if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getIsTwoDuty())&&pbSyGwEmployInfoDTO.getIsTwoDuty().equals("1")){
				Boolean b3= PbSyGwEmployInfoQueryHelper.checkTwoDuty(pbSyGwEmployInfoDTO);
				if(!b3){
					return "只能同时存在一笔在聘的管理岗和一笔在聘的专技岗！";
				}
			//}
		}else if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getStatusFlag())&&pbSyGwEmployInfoDTO.getStatusFlag().equals("false")){
			
		}else{
			return "无法获得岗位类别和岗位聘任状态是否更改过，请刷新重试或联系开发人员！";
		}
		//if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getIsMPositionFlag())&&pbSyGwEmployInfoDTO.getIsMPositionFlag().equals("true"))
		//{
			Boolean b2= PbSyGwEmployInfoQueryHelper.checkIsMPosition(pbSyGwEmployInfoDTO);
			Boolean haveOrNot = PbSyGwEmployInfoQueryHelper.haveOrNot(pbSyGwEmployInfoDTO);
			//Boolean is= PbSyGwEmployInfoQueryHelper.checkIsMPosition(pbSyGwEmployInfoDTO);
		//双肩挑人员判断是否一个主岗位
			if(b2&haveOrNot){
				if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getIsMPosition())&&pbSyGwEmployInfoDTO.getIsMPosition().equals("0")){
					return "在聘的非主岗位只能有一笔！";
				}
			}else if(!b2&haveOrNot){
				if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getIsMPosition())&&pbSyGwEmployInfoDTO.getIsMPosition().equals("1")){//是主岗位
						return "在聘的主岗位只能有一笔！";
				}
			}
		//}else if(StringUtils.isNotEmpty(pbSyGwEmployInfoDTO.getIsMPositionFlag())&&pbSyGwEmployInfoDTO.getIsMPositionFlag().equals("false")){
			
		//}else{
			//return "无法获得是否主岗位是否更改过，请刷新重试或联系开发人员！";
		//}
		return "";
	}
	
	/**
	 * 根据人员id查询该人员所有的事业岗位聘任信息
	 * @param personOid
	 * @return
	 * @throws ServiceException
	 */
	public List<PbSyGwEmployInfoDTO> listPbSyGwEmployInfoByPersonOid(Long personOid) throws ServiceException{
		List<PbSyGwEmployInfoDTO> list = PbSyGwEmployInfoQueryHelper.listPbSyGwEmployInfoByPersonOid(personOid);
		try {
			if(list!=null){
				for(PbSyGwEmployInfoDTO dto:list){
					if(dto.getDutyUnitOid()!=null){
						dto.setDutyUnitName(utUnitService.getUnitName(dto.getDutyUnitOid()));
					}
					if(dto.getDeptOid()!=null){
						dto.setDeptName(utOrgService.getOrgName(dto.getDeptOid()));
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("获取单位名称和部门名称时出错");
		}
		
		return list;
	}

}