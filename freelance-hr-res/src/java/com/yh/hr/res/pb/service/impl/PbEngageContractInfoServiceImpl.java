/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.res.pb.service.impl;

import com.yh.hr.res.pb.dto.PbEngageContractInfoDTO;
import com.yh.hr.res.pb.queryhelper.PbEngageContractInfoQueryHelper;
import com.yh.hr.res.pb.service.PbEngageContractInfoService;
import jade.workflow.utils.ObjectUtil;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.springframework.util.CollectionUtils;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.pb.bo.PbEngageContractInfo;
import com.yh.platform.core.dao.DaoUtil;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.StringMap;

public class PbEngageContractInfoServiceImpl implements PbEngageContractInfoService {
	public void create(PbEngageContractInfoDTO pbEngageContractInfoDto) throws ServiceException {
		//验证合同信息同一个人员id只能存在一条
		/*PbEngageContractInfoDTO uniqueCheckDTO = this.get(pbEngageContractInfoDto.getPersonOid());
		if(uniqueCheckDTO!=null){
			throw new ServiceException("当前人员已存在一笔合同！");
		}*/
		PbEngageContractInfo pbEngageContractInfo = new PbEngageContractInfo();
		BeanHelper.copyProperties(pbEngageContractInfoDto, pbEngageContractInfo);
        pbEngageContractInfo.save();
	}

	public PbEngageContractInfoDTO get(java.lang.Long pbEngageContractInfoId) throws ServiceException {
        return BeanHelper.copyProperties(DaoUtil.get(PbEngageContractInfo.class, pbEngageContractInfoId),PbEngageContractInfoDTO.class);
	}
    
	public void update(PbEngageContractInfoDTO pbEngageContractInfoDto) throws ServiceException {

		PbEngageContractInfo pbEngageContractInfo = DaoUtil.get(PbEngageContractInfo.class, pbEngageContractInfoDto.getEngageContractOid());
		BeanHelper.copyProperties(pbEngageContractInfoDto, pbEngageContractInfo);
		pbEngageContractInfo.update();
	}
    
	public void delete(java.lang.Long pbEngageContractInfoId) throws ServiceException {
      DaoUtil.get(PbEngageContractInfo.class, pbEngageContractInfoId).delete();
	}
    
	public List<PbEngageContractInfoDTO> find(TableTagBean ttb) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        HashMap<String, Object> hqlParams = new HashMap<String, Object>();
        buildHQL(ttb.getCondition(), hql, hqlParams);
        String order = ttb.getOrderBy();
        if (order != null) {
            if (ttb.getAsc()) {
                hql.append(" order by " + order + " asc");
            } else {
                hql.append(" order by " + order + " desc");
            }
        }
        List<PbEngageContractInfo> list = DaoUtil.listByCondition(hql.toString(), hqlParams, ttb.getPage() * ttb.getPageSize(), ttb.getPageSize());
        List<PbEngageContractInfoDTO> dtoList = new ArrayList<PbEngageContractInfoDTO>();
		if(!CollectionUtils.isEmpty(list))
		{
			for(PbEngageContractInfo bo : list)
			{
				PbEngageContractInfoDTO dto = new PbEngageContractInfoDTO();
				BeanHelper.copyProperties(bo, dto);
				dtoList.add(dto);
			}
		}
        ttb.setList(list);
        ttb.setTotal(DaoUtil.countByCondition("select count(*) "+hql, hqlParams));
        return dtoList;
	}

    public void buildHQL(StringMap params, StringBuilder hql, HashMap<String, Object> hqlParams) throws ServiceException {
        hql.append("from PbEngageContractInfo where 1=1");
        String personOid = params.getAsStringEmptyNull("personOid");
        if (personOid != null){
           	hql.append(" and personOid = :personOid");
           	try{
           		hqlParams.put("personOid", ObjectUtil.getValue(personOid, java.lang.Long.class));
           		System.out.println("personOid="+ObjectUtil.getValue(personOid, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
        String contractNo = params.getAsStringEmptyNull("contractNo");
        if (contractNo != null){
           hql.append(" and contractNo like :contractNo");
           hqlParams.put("contractNo", "%"+contractNo.trim()+"%");
        }
        String contractType = params.getAsStringEmptyNull("contractType");
        if (contractType != null){
           hql.append(" and contractType like :contractType");
           hqlParams.put("contractType", "%"+contractType.trim()+"%");
        }
        String changeType = params.getAsStringEmptyNull("changeType");
        if (changeType != null){
           hql.append(" and changeType like :changeType");
           hqlParams.put("changeType", "%"+changeType.trim()+"%");
        }
   }

	public boolean checkContractNo(PbEngageContractInfoDTO pbEngageContractInfoDto) throws ServiceException {
		
		return PbEngageContractInfoQueryHelper.checkContractNo(pbEngageContractInfoDto);
	}
	public boolean checkStatus(PbEngageContractInfoDTO pbEngageContractInfoDto) throws ServiceException {
		
		return PbEngageContractInfoQueryHelper.checkStatus(pbEngageContractInfoDto);
	}
	
	/**
	 * 用人员id查找该人员的合同信息
	 * @param personOid
	 * @return
	 * @throws ServiceException
	 */
	public PbEngageContractInfoDTO getPbEngageContractInfoByPersonOid(Long personOid) throws ServiceException {
		PbEngageContractInfo pbEngageContractInfo = PbEngageContractInfoQueryHelper.getPbEngageContractInfoByPersonOid(personOid);
		if(pbEngageContractInfo==null){
			throw new ServiceException("离职操作出错！当前人员没有录入合同信息");
		}
		return BeanHelper.copyProperties(pbEngageContractInfo, PbEngageContractInfoDTO.class);
	}

	/**
	 * 用人员id查找该人员的合同信息
	 * @param personOid
	 * @return
	 * @throws ServiceException
	 */
	public List<PbEngageContractInfoDTO> listPbEngageContractInfoByPersonOid(Long personOid) throws ServiceException {
		return PbEngageContractInfoQueryHelper.listPbEngageContractInfoByPersonOid(personOid);
	}

	/**
	 * 更新合同信息中的状态
	 * @param personOid 当前人员id
	 * @param status 新的合同状态
	 * @throws ServiceException
	 */
	public PbEngageContractInfo updateContractStatus(Long personOid, String status) throws ServiceException {
		//获取当前人员合同信息,修改合同状态为"解聘"
		PbEngageContractInfo pbEngageContractInfo = PbEngageContractInfoQueryHelper.getPbEngageContractInfoByPersonOid(personOid);
		if(pbEngageContractInfo==null){
			/*throw new ServiceException("离职操作出错！当前人员没有录入合同信息");*/
			return null;
		}
		pbEngageContractInfo.setStatus(status);
		//减员操作,填写"合同实际结束日期"
		pbEngageContractInfo.setContractEndActual(new Date());
		pbEngageContractInfo.update();
		
		return pbEngageContractInfo;
	}

	public void deleteByPersonOid(Long personOid) throws ServiceException {
		PbEngageContractInfoQueryHelper.deleteByPersonOid(personOid);
	}
}