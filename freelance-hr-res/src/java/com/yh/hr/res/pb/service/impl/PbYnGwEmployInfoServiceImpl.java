/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.res.pb.service.impl;

import com.yh.hr.res.pb.bo.PbYnGwEmployInfo;
import com.yh.hr.res.pb.queryhelper.PbYnGwEmployInfoQueryHelper;
import jade.workflow.utils.ObjectUtil;
import jade.workflow.utils.StringUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.springframework.util.CollectionUtils;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbYnGwEmployInfoDTO;
import com.yh.hr.res.pb.service.PbYnGwEmployInfoService;
import com.yh.hr.res.unit.service.UtOrgService;
import com.yh.platform.core.dao.DaoUtil;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringMap;

public class PbYnGwEmployInfoServiceImpl implements PbYnGwEmployInfoService{
	
	private UtOrgService utOrgService = (UtOrgService) SpringBeanUtil.getBean("utOrgService");
	
	public void create(PbYnGwEmployInfoDTO pbYnGwEmployInfoDto) throws ServiceException {
		PbYnGwEmployInfo pbYnGwEmployInfo = new PbYnGwEmployInfo();
		BeanHelper.copyProperties(pbYnGwEmployInfoDto, pbYnGwEmployInfo);
		if(StringUtil.isBlank(pbYnGwEmployInfo.getHisPositionOid())){
			pbYnGwEmployInfo.setHisPositionOid(null);
		}
        pbYnGwEmployInfo.save();
      //在聘
		if(DicConstants.YHRS0026_001.equals(pbYnGwEmployInfo.getHisPositionStatus()))
		{
			//同步到人员附属信息表
			PersonAttachInfoServiceUtil.sysPbYnGwEmployInfo(pbYnGwEmployInfo.getPersonOid());
		}
	}

	public PbYnGwEmployInfoDTO get(java.lang.Long pbYnGwEmployInfoId) throws ServiceException {
        return BeanHelper.copyProperties(DaoUtil.get(PbYnGwEmployInfo.class, pbYnGwEmployInfoId),PbYnGwEmployInfoDTO.class);
	}
    
	public void update(PbYnGwEmployInfoDTO pbYnGwEmployInfoDto) throws ServiceException {

		PbYnGwEmployInfo pbYnGwEmployInfo = new PbYnGwEmployInfo();
		BeanHelper.copyProperties(pbYnGwEmployInfoDto, pbYnGwEmployInfo);
		if(StringUtil.isBlank(pbYnGwEmployInfo.getHisPositionOid())){
			pbYnGwEmployInfo.setHisPositionOid(null);
		}
		pbYnGwEmployInfo.update();
		//同步到人员附属信息表
		PersonAttachInfoServiceUtil.sysPbYnGwEmployInfo(pbYnGwEmployInfo.getPersonOid());
	}
    
	public void delete(java.lang.Long pbYnGwEmployInfoId) throws ServiceException {
		PbYnGwEmployInfo bo = DaoUtil.get(PbYnGwEmployInfo.class, pbYnGwEmployInfoId);
        Long personOid = bo.getPersonOid();
		bo.delete();
		//同步到人员附属信息表
		PersonAttachInfoServiceUtil.sysPbYnGwEmployInfo(personOid);
	}
    
	public List<PbYnGwEmployInfoDTO> find(TableTagBean ttb) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        HashMap<String, Object> hqlParams = new HashMap<String, Object>();
        buildHQL(ttb.getCondition(), hql, hqlParams);
        String order = ttb.getOrderBy();
        if (order != null) {
            if (ttb.getAsc()) {
                hql.append(" order by " + order + " asc");
            } else {
                hql.append(" order by " + order + " desc");
            }
        }else{
        	hql.append(" order by hisPositionStatus asc");
        }
        List<PbYnGwEmployInfo> list = DaoUtil.listByCondition(hql.toString(), hqlParams, ttb.getPage() * ttb.getPageSize(), ttb.getPageSize());
        List<PbYnGwEmployInfoDTO> dtoList = new ArrayList<PbYnGwEmployInfoDTO>();
		if(!CollectionUtils.isEmpty(list))
		{
			for(PbYnGwEmployInfo bo : list)
			{
				PbYnGwEmployInfoDTO dto = new PbYnGwEmployInfoDTO();
				BeanHelper.copyProperties(bo, dto);
				dtoList.add(dto);
			}
		}
        ttb.setList(list);
        ttb.setTotal(DaoUtil.countByCondition("select count(*) "+hql, hqlParams));
        return dtoList;
	}

    public void buildHQL(StringMap params, StringBuilder hql, HashMap<String, Object> hqlParams) throws ServiceException {
        hql.append("from PbYnGwEmployInfo where 1=1");
        String personOid = params.getAsStringEmptyNull("personOid");
        if (personOid != null){
           	hql.append(" and personOid = :personOid");
           	try{
           		hqlParams.put("personOid", ObjectUtil.getValue(personOid, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
        String deptOid = params.getAsStringEmptyNull("deptOid");
        if (deptOid != null){
           	hql.append(" and deptOid = :deptOid");
           	try{
           		hqlParams.put("deptOid", ObjectUtil.getValue(deptOid, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
        String deptName = params.getAsStringEmptyNull("deptName");
        if (deptName != null){
           hql.append(" and deptName like :deptName");
           hqlParams.put("deptName", "%"+deptName.trim()+"%");
        }
        String hisPositionStatus = params.getAsStringEmptyNull("hisPositionStatus");
        if (hisPositionStatus != null){
           	hql.append(" and hisPositionStatus = :hisPositionStatus");
           	try{
           		hqlParams.put("hisPositionStatus", ObjectUtil.getValue(hisPositionStatus, java.lang.Long.class));
        	} catch (jade.workflow.exception.ServiceException e) {
			e.printStackTrace();
			}
        }
   }

	public boolean checkStatus(PbYnGwEmployInfoDTO pbYnGwEmployInfoDTO)
			throws ServiceException {
		return PbYnGwEmployInfoQueryHelper.checkStatus(pbYnGwEmployInfoDTO);
	}
	
	/**
	 * 根据人员id查询该人员所有的院内岗位聘任信息
	 * @param personOid
	 * @return
	 * @throws ServiceException
	 */
	public List<PbYnGwEmployInfoDTO> listPbYnGwEmployInfoByPersonOid(Long personOid) throws ServiceException{
		List<PbYnGwEmployInfoDTO> list =PbYnGwEmployInfoQueryHelper.listPbYnGwEmployInfoByPersonOid(personOid);
		try {
			if(list!=null){
				for(PbYnGwEmployInfoDTO dto:list){
					if(dto.getDeptOid()!=null){
						dto.setDeptName(utOrgService.getOrgName(dto.getDeptOid()));
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
			System.out.println("获取部门名称时出错");
		}
		return list;
	}

	public void deleteByPersonOid(Long personOid) throws ServiceException {
		PbYnGwEmployInfoQueryHelper.deleteByPersonOid(personOid);
	}
}