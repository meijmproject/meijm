/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import com.yh.hr.info.ver.unit.person.dto.VerPbPersonInfoDTO;
import jade.workflow.utils.ObjectUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.comm.facade.PbSyGwEmployInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbSyGwEmployInfoForm;
import com.yh.hr.info.ver.unit.person.facade.VerPbPersonInfoFacade;
import com.yh.hr.res.pb.dto.PbSyGwEmployInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbSyGwEmployInfoAction extends BaseAction {
	private PbSyGwEmployInfoFacade pbSyGwEmployInfoFacade = (PbSyGwEmployInfoFacade) SpringBeanUtil.getBean("pbSyGwEmployInfoFacade");
	private VerPbPersonInfoFacade	verPbPersonInfoFacade	= (VerPbPersonInfoFacade) SpringBeanUtil.getBean("verPbPersonInfoFacade");
	/**
	 * 列出所有 PbSyGwEmployInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbSyGwEmployInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbSyGwEmployInfoForm", form);
	    }
        try {
        	List<PbSyGwEmployInfoDTO> list = pbSyGwEmployInfoFacade.find(ttb);
        	List<PbSyGwEmployInfoDTO> showList = new ArrayList<PbSyGwEmployInfoDTO>();
			if(CollectionUtils.isNotEmpty(list))
			{
				for(PbSyGwEmployInfoDTO dto : list)
				{
					PbSyGwEmployInfoDTO showDto = new PbSyGwEmployInfoDTO();
					BeanHelper.copyProperties(dto, showDto);
					if(null != dto.getBeginDate())
					{
						showDto.setBeginDateStr(DateUtil.format(dto.getBeginDate(), "yyyy-MM-dd"));
					}
					showList.add(showDto);
				}
			}
	        request.setAttribute("list", showList);
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbSyGwEmployInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String syGwEmployOid = request.getParameter("syGwEmployOid");
        if (StringUtil.isBlank(syGwEmployOid)) {
            syGwEmployOid = ObjectUtil.getValue(request.getAttribute("syGwEmployOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(syGwEmployOid)) {
				throw new ServiceException("error.pk.invalid", "pbSyGwEmployInfo syGwEmployOid is null");
			}
            PbSyGwEmployInfoDTO pbSyGwEmployInfoDto = pbSyGwEmployInfoFacade.get(ObjectUtil.getValue(syGwEmployOid, java.lang.Long.class));
			if (null == pbSyGwEmployInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbSyGwEmployInfoForm pbSyGwEmployInfoForm = BeanHelper.copyProperties(pbSyGwEmployInfoDto, PbSyGwEmployInfoForm.class);
			if(null != pbSyGwEmployInfoForm.getBeginDate())
			{
				pbSyGwEmployInfoForm.setBeginDateStr(DateUtil.format(pbSyGwEmployInfoForm.getBeginDate(), "yyyy-MM-dd"));
			}
			if(null != pbSyGwEmployInfoForm.getEndDate())
			{
				pbSyGwEmployInfoForm.setEndDateStr(DateUtil.format(pbSyGwEmployInfoForm.getEndDate(), "yyyy-MM-dd"));
			}
			if(null != pbSyGwEmployInfoForm.getEndDateActual())
			{
				pbSyGwEmployInfoForm.setEndDateActualStr(DateUtil.format(pbSyGwEmployInfoForm.getEndDateActual(), "yyyy-MM-dd"));
			}
			request.setAttribute("pbSyGwEmployInfoForm", pbSyGwEmployInfoForm);
            request.setAttribute("syGwEmployOid", syGwEmployOid);
		} catch (Exception se) {
			this.handleException(request, se, "syGwEmployOid=" + syGwEmployOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbSyGwEmployInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goInsert(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		//参数校验，可根据实际情况修改pbSyGwEmployInfoForm
		PbSyGwEmployInfoForm pbSyGwEmployInfoForm = (PbSyGwEmployInfoForm)form;
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		try
		{
			if(StringUtils.isEmpty(urlId)){
				throw new ServiceException("urlId is null");
			}
			if(StringUtils.isEmpty(personOid)){
				throw new ServiceException("personOid is null");
			}
			VerPbPersonInfoDTO verSyPersonDTO = verPbPersonInfoFacade.getVerPersonInfoById(NumberUtils.longValue(personOid));
			if(verSyPersonDTO.getUnitOid()!=null){
				String unitName = verPbPersonInfoFacade.getUnitName(verSyPersonDTO.getUnitOid());
				verSyPersonDTO.setUnitName(unitName);
			}
			pbSyGwEmployInfoForm.setPersonOid(NumberUtils.longValue(personOid));
			pbSyGwEmployInfoForm.setDutyUnitOid(verSyPersonDTO.getUnitOid());
			pbSyGwEmployInfoForm.setDutyUnitName(verSyPersonDTO.getUnitName());
//			pbSyGwEmployInfoForm.setDeptName(verSyPersonDTO.getDeptName());
//			pbSyGwEmployInfoForm.setDeptOid(verSyPersonDTO.getDeptOid());
			request.setAttribute("personOid", personOid);
			request.setAttribute("urlId", urlId);
			request.setAttribute("pbSyGwEmployInfoForm", pbSyGwEmployInfoForm);
			
			/*if(verSyPersonDTO.getUnitOid()==null)
			{
				return null;
			}*/
			//内设机构
			/*List<SaoUbOrgDTO> orgList = pbSyGwEmployInfoFacade.listUnitOrg(verSyPersonDTO.getUnitOid());	
			request.setAttribute("orgList", orgList);
			
			JSONObject obj = new JSONObject();
			JSONArray array = new JSONArray();
			JSONObject obj0 = new JSONObject();
			obj0.put("orgOid","");
			obj0.put("orgName", "--请选择--");
			array.element(obj0);
			if(CollectionUtils.isNotEmpty(orgList))
			{
				for(SaoUbOrgDTO saoUbOrgDTO : orgList)
				{
					JSONObject obj1 = new JSONObject();
					obj1.put("orgOid",saoUbOrgDTO.getOrgOid());
					obj1.put("orgName", saoUbOrgDTO.getOrgName());
					array.element(obj1);
				}

			}
			obj.put("rs", array);
			request.setAttribute("rs", obj.toString());*/
			//response.getWriter().print(obj.toString());
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			return mapping.getInputForward();
		}
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbSyGwEmployInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		String personOid = request.getParameter("personOid");
		PbSyGwEmployInfoForm pbSyGwEmployInfoForm = (PbSyGwEmployInfoForm) form;
		try {
			if(StringUtils.isEmpty(personOid))
			{
				throw new ServiceException("${fkOid} is null");
			}
			PbSyGwEmployInfoDTO pbSyGwEmployInfoDto = BeanHelper.copyProperties(pbSyGwEmployInfoForm, PbSyGwEmployInfoDTO.class);
			if(StringUtils.isNotEmpty(pbSyGwEmployInfoDto.getPositioningStatus())&&pbSyGwEmployInfoDto.getPositioningStatus().equals("001"))
			{
				//验证
				String msg = pbSyGwEmployInfoFacade.check(pbSyGwEmployInfoDto);
				if(StringUtils.isNotEmpty(msg)){
					//同一岗位类别在聘信息记录的唯一校验
					response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,msg)).toString());
					 return null;
				}
			}
			pbSyGwEmployInfoDto.setPersonOid(NumberUtils.longValue(personOid));
			pbSyGwEmployInfoDto.setCreateBy(UserContext.getLoginUserID());
			pbSyGwEmployInfoDto.setCreateName(UserContext.getLoginUserName());
			pbSyGwEmployInfoDto.setCreateDate(DateUtil.now());
			pbSyGwEmployInfoFacade.create(pbSyGwEmployInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
			
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbSyGwEmployInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}

        String syGwEmployOid = request.getParameter("syGwEmployOid");
        

		try {
            if (StringUtils.isBlank(syGwEmployOid)) {
				throw new ServiceException("error.pk.invalid", "pbSyGwEmployInfo syGwEmployOid is null");
			}
            PbSyGwEmployInfoDTO pbSyGwEmployInfoDto = pbSyGwEmployInfoFacade.get(ObjectUtil.getValue(syGwEmployOid, java.lang.Long.class));
			if (null == pbSyGwEmployInfoDto) {
				throw new ServiceException("error.object.notfound", "pbSyGwEmployInfo not found by syGwEmployOid");
			}
			PbSyGwEmployInfoForm pbSyGwEmployInfoForm = BeanHelper.copyProperties(pbSyGwEmployInfoDto, PbSyGwEmployInfoForm.class);
			if(null != pbSyGwEmployInfoForm.getBeginDate())
			{
				pbSyGwEmployInfoForm.setBeginDateStr(DateUtil.format(pbSyGwEmployInfoForm.getBeginDate(), "yyyy-MM-dd"));
			}
			if(null != pbSyGwEmployInfoForm.getEndDate())
			{
				pbSyGwEmployInfoForm.setEndDateStr(DateUtil.format(pbSyGwEmployInfoForm.getEndDate(), "yyyy-MM-dd"));
			}
			if(null != pbSyGwEmployInfoForm.getEndDateActual())
			{
				pbSyGwEmployInfoForm.setEndDateActualStr(DateUtil.format(pbSyGwEmployInfoForm.getEndDateActual(), "yyyy-MM-dd"));
			}
			
			//获取该人员的基础信息,从而获取其中的单位名称和单位oid
			VerPbPersonInfoDTO verSyPersonDTO = verPbPersonInfoFacade.getVerPersonInfoById(pbSyGwEmployInfoDto.getPersonOid());
			if(verSyPersonDTO.getUnitOid()!=null){
				String unitName = verPbPersonInfoFacade.getUnitName(verSyPersonDTO.getUnitOid());
				verSyPersonDTO.setUnitName(unitName);
			}
			request.setAttribute("currentUnitName", verSyPersonDTO.getUnitName());
			request.setAttribute("currentUnitOid", verSyPersonDTO.getUnitOid());
			
			request.setAttribute("pbSyGwEmployInfoForm", pbSyGwEmployInfoForm);
            request.setAttribute("syGwEmployOid", syGwEmployOid);
            request.setAttribute("urlId", request.getParameter("urlId"));
		} catch (Exception se) {
			this.handleException(request, se, "syGwEmployOid=" + syGwEmployOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbSyGwEmployInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbSyGwEmployInfoForm pbSyGwEmployInfoForm = (PbSyGwEmployInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbSyGwEmployInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String syGwEmployOid = request.getParameter("syGwEmployOid");
		PbSyGwEmployInfoForm pbSyGwEmployInfoForm = (PbSyGwEmployInfoForm) form;
		try {
            if (StringUtils.isBlank(syGwEmployOid)) {
				throw new ServiceException("error.pk.invalid", "pbSyGwEmployInfo syGwEmployOid is null");
			}
			if(StringUtils.isEmpty(pbSyGwEmployInfoForm.getPersonOid().toString()))
			{
				throw new ServiceException("${fkOid} is null");
			}
			PbSyGwEmployInfoDTO pbSyGwEmployInfoDto = new PbSyGwEmployInfoDTO();
			BeanHelper.copyProperties(pbSyGwEmployInfoForm, pbSyGwEmployInfoDto);
				if(StringUtils.isNotEmpty(pbSyGwEmployInfoDto.getPositioningStatus())&&pbSyGwEmployInfoDto.getPositioningStatus().equals("001"))
				{
					String msg = pbSyGwEmployInfoFacade.check(pbSyGwEmployInfoDto);
					if(StringUtils.isNotEmpty(msg)){
						//同一岗位类别在聘信息记录的唯一校验
						response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,msg)).toString());
						 return null;
					}
				}
				pbSyGwEmployInfoDto.setUpdateBy(UserContext.getLoginUserID());
				pbSyGwEmployInfoDto.setUpdateName(UserContext.getLoginUserName());
				pbSyGwEmployInfoDto.setUpdateDate(DateUtil.now());
				pbSyGwEmployInfoFacade.update(pbSyGwEmployInfoDto);
				response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, pbSyGwEmployInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbSyGwEmployInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String syGwEmployOid = request.getParameter("syGwEmployOid");
        try {
           if(StringUtils.isEmpty(syGwEmployOid))
			{
				throw new ServiceException(null, "syGwEmployOid is null");
			}
            pbSyGwEmployInfoFacade.delete(ObjectUtil.getValue(syGwEmployOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "syGwEmployOid=" + syGwEmployOid);
            return mapping.getInputForward();
        }
        return null;
    }

}
