/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import com.yh.hr.info.ver.unit.comm.facade.PbEngageContractInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbEngageContractInfoForm;
import com.yh.hr.info.ver.unit.person.dto.VerPbPersonInfoDTO;
import jade.workflow.utils.ObjectUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.person.facade.VerPbPersonInfoFacade;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbEngageContractInfoDTO;
import com.yh.hr.res.sao.orghc.dto.SaoUbUnitDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbEngageContractInfoAction extends BaseAction {
	private PbEngageContractInfoFacade pbEngageContractInfoFacade = (PbEngageContractInfoFacade) SpringBeanUtil.getBean("pbEngageContractInfoFacade");
	private VerPbPersonInfoFacade verPbPersonInfoFacade = (VerPbPersonInfoFacade) SpringBeanUtil.getBean("verPbPersonInfoFacade");

	/**
	 * 列出所有 PbEngageContractInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbContractInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbEngageContractInfoForm", form);
	    }
        try {
        	List<PbEngageContractInfoDTO> list = pbEngageContractInfoFacade.find(ttb);
        	List<PbEngageContractInfoDTO> showList = new ArrayList<PbEngageContractInfoDTO>();
			if(CollectionUtils.isNotEmpty(list))
			{
				for(PbEngageContractInfoDTO dto : list)
				{
					PbEngageContractInfoDTO showDto = new PbEngageContractInfoDTO();
					BeanHelper.copyProperties(dto, showDto);
					if(null != dto.getContractBegin())
					{
						showDto.setContractBeginStr(DateUtil.format(dto.getContractBegin(), "yyyy-MM-dd"));
					}
					showList.add(showDto);
				}
			}
	        request.setAttribute("list", showList);
	        if(!list.isEmpty()){
	        	PbEngageContractInfoForm pbEngageContractInfoForm = BeanHelper.copyProperties(list.get(0), PbEngageContractInfoForm.class);
	        	pbEngageContractInfoForm.setContractBegin(pbEngageContractInfoForm.getContractBegin());//必须重新赋值才能使contractBeginStr获取到值
	        	request.setAttribute("pbEngageContractInfoForm", pbEngageContractInfoForm);
	        }
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbEngageContractInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String engageContractOid = request.getParameter("engageContractOid");
        if (StringUtil.isBlank(engageContractOid)) {
            engageContractOid = ObjectUtil.getValue(request.getAttribute("engageContractOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(engageContractOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageContractInfo engageContractOid is null");
			}
            PbEngageContractInfoDTO pbEngageContractInfoDto = pbEngageContractInfoFacade.get(ObjectUtil.getValue(engageContractOid, java.lang.Long.class));
			if (null == pbEngageContractInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbEngageContractInfoForm pbEngageContractInfoForm = BeanHelper.copyProperties(pbEngageContractInfoDto, PbEngageContractInfoForm.class);
			if(null != pbEngageContractInfoForm.getContractBegin())
			{
				pbEngageContractInfoForm.setContractBeginStr(DateUtil.format(pbEngageContractInfoForm.getContractBegin(), "yyyy-MM-dd"));
			}
			
			request.setAttribute("engageContractInfoForm", pbEngageContractInfoForm);
            request.setAttribute("engageContractOid", engageContractOid);
		} catch (Exception se) {
			this.handleException(request, se, "engageContractOid=" + engageContractOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbEngageContractInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		//参数校验，可根据实际情况修改
		PbEngageContractInfoForm pbEngageContractInfoForm = (PbEngageContractInfoForm)form;
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		try
		{
			if(StringUtils.isEmpty(urlId)){
				throw new ServiceException("urlId is null");
			}
			if(StringUtils.isEmpty(personOid)){
				throw new ServiceException("personOid is null");
			}
			VerPbPersonInfoDTO verSyPersonDTO = verPbPersonInfoFacade.getVerPersonInfoById(NumberUtils.longValue(personOid));
			
			
			if(null!=verSyPersonDTO&&verSyPersonDTO.getUnitOid()!=null){
				pbEngageContractInfoForm.setUnitName(verPbPersonInfoFacade.getUnitName(verSyPersonDTO.getUnitOid()));
				pbEngageContractInfoForm.setUnitOid(verSyPersonDTO.getUnitOid());
				//获取单位信息
				SaoUbUnitDTO ubUnitDto = pbEngageContractInfoFacade.getUnitInfo(verSyPersonDTO.getUnitOid());
				if(null!=ubUnitDto){
					pbEngageContractInfoForm.setUnitName(ubUnitDto.getUnitName());
					pbEngageContractInfoForm.setUnitOid(ubUnitDto.getUnitOid());
					pbEngageContractInfoForm.setUnitAddress(ubUnitDto.getAddress());//单位地址
					pbEngageContractInfoForm.setUnitMaster(ubUnitDto.getContacter());//法定代表人（联系人）
					pbEngageContractInfoForm.setUnitPhone(ubUnitDto.getPhone());//联系电话
				}
				
			}
			//跳转合同新增页面时默认和合同类型为首聘
			pbEngageContractInfoForm.setChangeType(DicConstants.YHRS0115_1);
			//跳转合同新增页面时默认和合同状态为在聘
			pbEngageContractInfoForm.setStatus(DicConstants.YHRS0116_1);
			
			request.setAttribute("personOid", personOid);
			request.setAttribute("urlId", urlId);
			request.setAttribute("engageContractInfoForm", pbEngageContractInfoForm);
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			return mapping.getInputForward();
		}
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbEngageContractInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbEngageContractInfoForm pbEngageContractInfoForm = (PbEngageContractInfoForm) form;
		try {
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbEngageContractInfoDTO pbEngageContractInfoDto = BeanHelper.copyProperties(pbEngageContractInfoForm, PbEngageContractInfoDTO.class);
//	gg		pbEngageContractInfoDto.setPersonOid(NumberUtils.longValue(personOid));
//			if(StringUtils.isEmpty(pbEngageContractInfoDto.getContractNo())){
//				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同编号为空！请刷新重试或联系开发人员！")).toString());
//				return null;
//			}else 
			if(null==pbEngageContractInfoDto.getPersonOid()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的人员Id为null！请刷新重试或联系开发人员！")).toString());
				return null;
			}else if(null==pbEngageContractInfoDto.getStatus()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同状态为空！请刷新重试或联系开发人员！")).toString());
				return null;
			}
			Boolean contractNoBoolean = pbEngageContractInfoFacade.checkContractNo(pbEngageContractInfoDto);
			Boolean statusBoolean = pbEngageContractInfoFacade.checkStatus(pbEngageContractInfoDto);
			if(!contractNoBoolean){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"合同编号不能重复！")).toString());
				 return null;
			}else if(!statusBoolean){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"在聘的合同只能有一笔！")).toString());
				 return null;
			}else{
				pbEngageContractInfoDto.setCreateBy(UserContext.getLoginUserID());
				pbEngageContractInfoDto.setCreateName(UserContext.getLoginUserName());
				pbEngageContractInfoDto.setCreateDate(DateUtil.now());
				pbEngageContractInfoFacade.create(pbEngageContractInfoDto);
				response.getWriter().write(JSONHelper.fromObject(true, null).toString());
			}
			
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "新增失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbEngageContractInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}

        String engageContractOid = request.getParameter("engageContractOid");

		try {
            if (StringUtils.isBlank(engageContractOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageContractInfo engageContractOid is null");
			}
            PbEngageContractInfoDTO pbEngageContractInfoDto = pbEngageContractInfoFacade.get(ObjectUtil.getValue(engageContractOid, java.lang.Long.class));
			if (null == pbEngageContractInfoDto) {
				throw new ServiceException("error.object.notfound", "pbEngageContractInfo not found by engageContractOid");
			}
			PbEngageContractInfoForm pbEngageContractInfoForm = BeanHelper.copyProperties(pbEngageContractInfoDto, PbEngageContractInfoForm.class);
			if(null != pbEngageContractInfoForm.getContractBegin())
			{
				pbEngageContractInfoForm.setContractBeginStr(DateUtil.format(pbEngageContractInfoForm.getContractBegin(), "yyyy-MM-dd"));
			}
			if(null != pbEngageContractInfoForm.getContractEnd())
			{
				pbEngageContractInfoForm.setContractEndStr(DateUtil.format(pbEngageContractInfoForm.getContractEnd(), "yyyy-MM-dd"));
			}
			if(null != pbEngageContractInfoForm.getContractEndActual())
			{
				pbEngageContractInfoForm.setContractEndActualStr(DateUtil.format(pbEngageContractInfoForm.getContractEndActual(), "yyyy-MM-dd"));
			}
			if(null != pbEngageContractInfoForm.getProbationBegin())
			{
				pbEngageContractInfoForm.setProbationBeginStr(DateUtil.format(pbEngageContractInfoForm.getProbationBegin(), "yyyy-MM-dd"));
			}
			if(null != pbEngageContractInfoForm.getProbationEnd())
			{
				pbEngageContractInfoForm.setProbationEndStr(DateUtil.format(pbEngageContractInfoForm.getProbationEnd(), "yyyy-MM-dd"));
			}
			if(null != pbEngageContractInfoForm.getSignDate())
			{
				pbEngageContractInfoForm.setSignDateStr(DateUtil.format(pbEngageContractInfoForm.getSignDate(), "yyyy-MM-dd"));
			}
			request.setAttribute("engageContractInfoForm", pbEngageContractInfoForm);
            request.setAttribute("engageContractOid", engageContractOid);
            request.setAttribute("urlId", request.getParameter("urlId"));
		} catch (Exception se) {
			this.handleException(request, se, "engageContractOid=" + engageContractOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbEngageContractInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbEngageContractInfoForm pbEngageContractInfoForm = (PbEngageContractInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbEngageContractInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String engageContractOid = request.getParameter("engageContractOid");
        String contractNoFlag = request.getParameter("contractNoFlag");
        String statusFlag = request.getParameter("statusFlag");
        Boolean contractNoBoolean = true;
        Boolean statusBoolean = true;
		PbEngageContractInfoForm pbEngageContractInfoForm = (PbEngageContractInfoForm) form;
		try {
            if (StringUtils.isBlank(engageContractOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageContractInfo engageContractOid is null");
			}
			PbEngageContractInfoDTO pbEngageContractInfoDto = new PbEngageContractInfoDTO();
			BeanHelper.copyProperties(pbEngageContractInfoForm, pbEngageContractInfoDto);
//			if(StringUtils.isEmpty(pbEngageContractInfoDto.getContractNo())){
//				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同编号为空！请刷新重试或联系开发人员！")).toString());
//				return null;
//			}else 
			if(null==pbEngageContractInfoDto.getPersonOid()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的人员Id为null！请刷新重试或联系开发人员！")).toString());
				return null;
			}else if(null==pbEngageContractInfoDto.getStatus()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同状态为空！请刷新重试或联系开发人员！")).toString());
				return null;
			}
			//判断是否需要验证唯一性  
			//true为修改过，false为未修改
			if(StringUtils.isNotEmpty(contractNoFlag)&&contractNoFlag.equals("true")){
				contractNoBoolean = pbEngageContractInfoFacade.checkContractNo(pbEngageContractInfoDto);
			}else if(StringUtils.isNotEmpty(contractNoFlag)&&contractNoFlag.equals("false")){
			}else{
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"无法获得合同编号是否更改过，请刷新重试或联系开发人员！")).toString());
				 return null;
			}
			if(StringUtils.isNotEmpty(statusFlag)&&statusFlag.equals("true")){
				statusBoolean = pbEngageContractInfoFacade.checkStatus(pbEngageContractInfoDto);
			}else if(StringUtils.isNotEmpty(statusFlag)&&statusFlag.equals("false")){
			}else{
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"无法获得合同状态是否更改过，请刷新重试或联系开发人员！")).toString());
				 return null;
			}
			
			
			if(!contractNoBoolean){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"合同编号不能重复！")).toString());
				 return null;
			}else if(!statusBoolean){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"在聘的合同只能有一笔！")).toString());
				 return null;
			}else{
				pbEngageContractInfoDto.setUpdateBy(UserContext.getLoginUserID());
				pbEngageContractInfoDto.setUpdateName(UserContext.getLoginUserName());
				pbEngageContractInfoDto.setUpdateDate(DateUtil.now());
				pbEngageContractInfoFacade.update(pbEngageContractInfoDto);
				response.getWriter().write(JSONHelper.fromObject(true, null).toString());
			}
		} catch (Exception se) {
			this.handleException(request, se, pbEngageContractInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbEngageContractInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String engageContractOid = request.getParameter("engageContractOid");
        try {
           if(StringUtils.isEmpty(engageContractOid))
			{
				throw new ServiceException(null, "engageContractOid is null");
			}
            pbEngageContractInfoFacade.delete(ObjectUtil.getValue(engageContractOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "engageContractOid=" + engageContractOid);
            return mapping.getInputForward();
        }
        return null;
    }

}
