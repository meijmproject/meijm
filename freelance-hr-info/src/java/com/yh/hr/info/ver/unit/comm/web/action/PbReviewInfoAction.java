/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-13
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import com.yh.hr.info.ver.unit.person.dto.VerPbPersonInfoDTO;
import jade.workflow.utils.ObjectUtil;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.dictionary.utils.DicHelper;
import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.comm.facade.PbReviewInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbReviewInfoForm;
import com.yh.hr.info.ver.unit.person.facade.VerPbPersonInfoFacade;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbReviewInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbReviewInfoAction extends BaseAction {
	private PbReviewInfoFacade pbReviewInfoFacade = (PbReviewInfoFacade) SpringBeanUtil.getBean("pbReviewInfoFacade");
	private VerPbPersonInfoFacade	verPbPersonInfoFacade	= (VerPbPersonInfoFacade) SpringBeanUtil.getBean("verPbPersonInfoFacade");


	/**
	 * 列出所有 PbReviewInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbReviewInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbReviewInfoForm", form);
	    }
		Long personOid = NumberUtils.longValue(ttb.getCondition().get("personOid"));
		VerPbPersonInfoDTO verPbPersonInfoDTO= verPbPersonInfoFacade.getVerPersonInfoById(personOid);
		if(null != verPbPersonInfoDTO)
		{
			request.setAttribute("unitOid", verPbPersonInfoDTO.getUnitOid());
		}
        try {
        	List<PbReviewInfoDTO> list = pbReviewInfoFacade.find(ttb);
        	if(CollectionUtils.isNotEmpty(list))
        	{
        		for(PbReviewInfoDTO dto:list)
        		{
        			dto.setReviewUnitName(pbReviewInfoFacade.getOrgName(NumberUtils.longValue(dto.getReviewUnitOid())));
        		}
        	}
	        request.setAttribute("list", ttb.getList());
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbReviewInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String reviewOid = request.getParameter("reviewOid");
        if (StringUtil.isBlank(reviewOid)) {
            reviewOid = ObjectUtil.getValue(request.getAttribute("reviewOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(reviewOid)) {
				throw new ServiceException("error.pk.invalid", "pbReviewInfo reviewOid is null");
			}
            PbReviewInfoDTO pbReviewInfoDto = pbReviewInfoFacade.get(ObjectUtil.getValue(reviewOid, java.lang.Long.class));
			if (null == pbReviewInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbReviewInfoForm pbReviewInfoForm = BeanHelper.copyProperties(pbReviewInfoDto, PbReviewInfoForm.class);
			Long unitOid = Long.parseLong(pbReviewInfoForm.getReviewUnitOid());
			pbReviewInfoForm.setReviewUnitName(pbReviewInfoFacade.getOrgName(unitOid));
			request.setAttribute("pbReviewInfoForm", pbReviewInfoForm);
            request.setAttribute("reviewOid", reviewOid);
		} catch (Exception se) {
			this.handleException(request, se, "reviewOid=" + reviewOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbReviewInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		//参数校验，可根据实际情况修改
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		PbReviewInfoForm pbReviewInfoForm = (PbReviewInfoForm) form;
		try
		{
			if(StringUtils.isEmpty(personOid))
			{
				throw new ServiceException("personOid is null");
			}
			VerPbPersonInfoDTO verPbPersonInfoDTO= verPbPersonInfoFacade.getVerPersonInfoById(NumberUtils.longValue(personOid));
			if(null != verPbPersonInfoDTO)
			{
				pbReviewInfoForm.setUnitOid(verPbPersonInfoDTO.getUnitOid());
			}
			request.setAttribute("personOid", personOid);
			request.setAttribute("urlId", urlId);
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			return mapping.getInputForward();
		}
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbReviewInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		String personOid = request.getParameter("personOid");
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		PbReviewInfoForm pbReviewInfoForm = (PbReviewInfoForm) form;
		ttb.getCondition().put("reviewYearStr", pbReviewInfoForm.getReviewYearStr());
		ttb.getCondition().put("personOid", personOid);
		try {
			List<PbReviewInfoDTO> list = pbReviewInfoFacade.findByReviewYear(ttb);
			if(list!=null && list.size()>0) {
				throw new Exception("新增失败，该人员在该年度的考核信息已存在");
			}

			PbReviewInfoDTO pbReviewInfoDto = BeanHelper.copyProperties(pbReviewInfoForm, PbReviewInfoDTO.class);
			String reviewTypeName = DicHelper.viewName(DicConstants.YHRS0069, pbReviewInfoDto.getReviewTypeCode());
			String reviewResultDesc = DicHelper.viewName(DicConstants.YHRS0070, pbReviewInfoDto.getReviewResultCode().toString());
			pbReviewInfoDto.setReviewTypeName(reviewTypeName);
			pbReviewInfoDto.setReviewResultDesc(reviewResultDesc);
			pbReviewInfoDto.setCreateBy(UserContext.getLoginUserID());
			pbReviewInfoDto.setCreateName(UserContext.getLoginUserName());
			pbReviewInfoDto.setCreateDate(DateUtil.now());
			pbReviewInfoFacade.create(pbReviewInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "添加失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbReviewInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String reviewOid = request.getParameter("reviewOid");
        String urlId = request.getParameter("urlId");

		try {
            if (StringUtils.isBlank(reviewOid)) {
				throw new ServiceException("error.pk.invalid", "pbReviewInfo reviewOid is null");
			}
            PbReviewInfoDTO pbReviewInfoDto = pbReviewInfoFacade.get(ObjectUtil.getValue(reviewOid, java.lang.Long.class));
			if (null == pbReviewInfoDto) {
				throw new ServiceException("error.object.notfound", "pbReviewInfo not found by reviewOid");
			}
			PbReviewInfoForm pbReviewInfoForm = BeanHelper.copyProperties(pbReviewInfoDto, PbReviewInfoForm.class);
			pbReviewInfoForm.setReviewUnitName(pbReviewInfoFacade.getOrgName(NumberUtils.longValue(pbReviewInfoForm.getReviewUnitOid())));
			
            request.setAttribute("reviewOid", reviewOid);
            request.setAttribute("urlId", urlId);
            VerPbPersonInfoDTO verPbPersonInfoDTO= verPbPersonInfoFacade.getVerPersonInfoById(pbReviewInfoDto.getPersonOid());
			if(null != verPbPersonInfoDTO)
			{
				pbReviewInfoForm.setUnitOid(verPbPersonInfoDTO.getUnitOid());
			}
			request.setAttribute("pbReviewInfoForm", pbReviewInfoForm);
		} catch (Exception se) {
			this.handleException(request, se, "reviewOid=" + reviewOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbReviewInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
//        PbReviewInfoForm pbReviewInfoForm = (PbReviewInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbReviewInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
//		String personOid = request.getParameter("personOid");
//		String reviewOid = request.getParameter("reviewOid");
		PbReviewInfoForm pbReviewInfoForm = (PbReviewInfoForm) form;
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		ttb.getCondition().put("reviewYearStr", pbReviewInfoForm.getReviewYearStr());
		ttb.getCondition().put("personOid", pbReviewInfoForm.getPersonOid().toString());
		ttb.getCondition().put("reviewOid", pbReviewInfoForm.getReviewOid().toString());
		try {
			List<PbReviewInfoDTO> list = pbReviewInfoFacade.findByReviewYear(ttb);
			if(list!=null && list.size()>0) {
				throw new Exception("修改失败，该人员在该年度的考核信息已存在");
			}
			
//            if (StringUtils.isBlank(reviewOid)) {
//				throw new ServiceException("error.pk.invalid", "pbReviewInfo reviewOid is null");
//			}
//			if(StringUtils.isEmpty(personOid))
//			{
//				throw new ServiceException("personOid is null");
//			}
			PbReviewInfoDTO pbReviewInfoDto = new PbReviewInfoDTO();
			BeanHelper.copyProperties(pbReviewInfoForm, pbReviewInfoDto);
			String reviewTypeName = DicHelper.viewName(DicConstants.YHRS0069, pbReviewInfoDto.getReviewTypeCode());
			String reviewResultDesc = DicHelper.viewName(DicConstants.YHRS0070, pbReviewInfoDto.getReviewResultCode().toString());
			pbReviewInfoDto.setReviewTypeName(reviewTypeName);
			pbReviewInfoDto.setReviewResultDesc(reviewResultDesc);
			pbReviewInfoDto.setUpdateBy(UserContext.getLoginUserID());
			pbReviewInfoDto.setUpdateName(UserContext.getLoginUserName());
			pbReviewInfoDto.setUpdateDate(DateUtil.now());
			pbReviewInfoFacade.update(pbReviewInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, pbReviewInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbReviewInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String reviewOid = request.getParameter("reviewOid");
        try {
           if(StringUtils.isEmpty(reviewOid))
			{
				throw new ServiceException(null, "reviewOid is null");
			}
            pbReviewInfoFacade.delete(ObjectUtil.getValue(reviewOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "reviewOid=" + reviewOid);
            return mapping.getInputForward();
        }
        return null;
    }

}
