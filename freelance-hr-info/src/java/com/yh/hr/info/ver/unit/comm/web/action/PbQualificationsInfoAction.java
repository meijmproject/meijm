/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import com.yh.hr.info.ver.unit.comm.facade.PbQualificationsInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbQualificationsInfoForm;
import jade.workflow.utils.ObjectUtil;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.dictionary.utils.DicHelper;
import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbQualificationsInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbQualificationsInfoAction extends BaseAction {
	private PbQualificationsInfoFacade pbQualificationsInfoFacade = (PbQualificationsInfoFacade) SpringBeanUtil.getBean("pbQualificationsInfoFacade");

	/**
	 * 列出所有 PbQualificationsInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbQualificationsInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbQualificationsInfoForm", form);
	    }
        try {
	        List<PbQualificationsInfoDTO> list = pbQualificationsInfoFacade.find(ttb);

            for(PbQualificationsInfoDTO dto: list){


            	if(StringUtils.isNotEmpty(dto.getQualificationsCode()))
    			{
            		dto.setQualificationsCode(DicHelper.viewName(DicConstants.YHRS9004, dto.getQualificationsCode()));
    			}
            	if(StringUtils.isNotEmpty(dto.getQualificationsLevelCode()))
    			{
            		dto.setQualificationsLevelCode(DicHelper.viewName(DicConstants.YHRS0049, dto.getQualificationsLevelCode()));
    			}
            	if(StringUtils.isNotEmpty(dto.getAcquireApproachCode()))
    			{
            		dto.setAcquireApproachCode(DicHelper.viewName(DicConstants.YHRS0048, dto.getAcquireApproachCode()));
    			}
            	if(StringUtils.isNotEmpty(dto.getIsHighestLevel()))
    			{
            		dto.setIsHighestLevel(DicHelper.viewName(DicConstants.YHRS0003, dto.getIsHighestLevel()));
    			}
            	if(dto.getProcureDate()!=null)
    			{
            		dto.setProcureDateStr(DateUtil.format(dto.getProcureDate(), "yyyy-MM-dd"));
    			}
            	if(dto.getValidityDate()!=null)
    			{
            		dto.setValidityDateStr(DateUtil.format(dto.getValidityDate(), "yyyy-MM-dd"));
    			}
            }

			request.setAttribute("list", list);
	        request.setAttribute("ttb", ttb);
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbQualificationsInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String qualificationsOid = request.getParameter("qualificationsOid");
        if (StringUtil.isBlank(qualificationsOid)) {
            qualificationsOid = ObjectUtil.getValue(request.getAttribute("qualificationsOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(qualificationsOid)) {
				throw new ServiceException("error.pk.invalid", "pbQualificationsInfo qualificationsOid is null");
			}
            PbQualificationsInfoDTO pbQualificationsInfoDto = pbQualificationsInfoFacade.get(ObjectUtil.getValue(qualificationsOid, java.lang.Long.class));
			if (null == pbQualificationsInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbQualificationsInfoForm pbQualificationsInfoForm = BeanHelper.copyProperties(pbQualificationsInfoDto, PbQualificationsInfoForm.class);
			pbQualificationsInfoForm.setProcureDateStr(DateUtil.format(pbQualificationsInfoForm.getProcureDate(), "yyyy-MM-dd"));
			pbQualificationsInfoForm.setValidityDateStr(DateUtil.format(pbQualificationsInfoForm.getValidityDate(), "yyyy-MM-dd"));
			
			request.setAttribute("pbQualificationsInfoForm", pbQualificationsInfoForm);
            request.setAttribute("qualificationsOid", qualificationsOid);
		} catch (Exception se) {
			this.handleException(request, se, "qualificationsOid=" + qualificationsOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbQualificationsInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		if(StringUtils.isEmpty(urlId))
		{
			throw new ServiceException("urlId is null");
		}
		if(StringUtils.isEmpty(personOid))
		{
			throw new ServiceException("personOid is null");
		}

		request.setAttribute("urlId", urlId);
		request.setAttribute("personOid", personOid);
		
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbQualificationsInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbQualificationsInfoForm pbQualificationsInfoForm = (PbQualificationsInfoForm) form;
		try {
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbQualificationsInfoDTO pbQualificationsInfoDto = BeanHelper.copyProperties(pbQualificationsInfoForm, PbQualificationsInfoDTO.class);
//			pbQualificationsInfoDto.setPersonOid(NumberUtils.longValue(personOid));
			pbQualificationsInfoDto.setCreateBy(UserContext.getLoginUserID());
			pbQualificationsInfoDto.setCreateName(UserContext.getLoginUserName());
			pbQualificationsInfoDto.setCreateDate(DateUtil.now());
			pbQualificationsInfoFacade.create(pbQualificationsInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "新增失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbQualificationsInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		
		String urlId = request.getParameter("urlId");
        String qualificationsOid = request.getParameter("qualificationsOid");

		try {
			if(StringUtils.isEmpty(urlId))
			{
				throw new ServiceException(null, "urlId is null");
			}
            if (StringUtils.isBlank(qualificationsOid)) {
				throw new ServiceException("error.pk.invalid", "pbQualificationsInfo qualificationsOid is null");
			}
            PbQualificationsInfoDTO pbQualificationsInfoDto = pbQualificationsInfoFacade.get(ObjectUtil.getValue(qualificationsOid, java.lang.Long.class));
			if (null == pbQualificationsInfoDto) {
				throw new ServiceException("error.object.notfound", "pbQualificationsInfo not found by qualificationsOid");
			}
			PbQualificationsInfoForm pbQualificationsInfoForm = BeanHelper.copyProperties(pbQualificationsInfoDto, PbQualificationsInfoForm.class);
			pbQualificationsInfoForm.setProcureDateStr(DateUtil.format(pbQualificationsInfoForm.getProcureDate(), "yyyy-MM-dd"));
			pbQualificationsInfoForm.setValidityDateStr(DateUtil.format(pbQualificationsInfoForm.getValidityDate(), "yyyy-MM-dd"));
			
			request.setAttribute("urlId", urlId);
			request.setAttribute("pbQualificationsInfoForm", pbQualificationsInfoForm);
            request.setAttribute("qualificationsOid", qualificationsOid);
		} catch (Exception se) {
			this.handleException(request, se, "qualificationsOid=" + qualificationsOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbQualificationsInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbQualificationsInfoForm pbQualificationsInfoForm = (PbQualificationsInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbQualificationsInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String qualificationsOid = request.getParameter("qualificationsOid");
		PbQualificationsInfoForm pbQualificationsInfoForm = (PbQualificationsInfoForm) form;
		try {
            if (StringUtils.isBlank(qualificationsOid)) {
				throw new ServiceException("error.pk.invalid", "pbQualificationsInfo qualificationsOid is null");
			}

            
            PbQualificationsInfoDTO pbQualificationsInfoDto = pbQualificationsInfoFacade.get(NumberUtils.longValue(qualificationsOid));
			if(null == pbQualificationsInfoDto)
			{
				throw new ServiceException(null, "查询不到相关信息");
			}
			
			BeanHelper.copyProperties(pbQualificationsInfoForm, pbQualificationsInfoDto);
			pbQualificationsInfoDto.setUpdateBy(UserContext.getLoginUserID());
			pbQualificationsInfoDto.setUpdateName(UserContext.getLoginUserName());
			pbQualificationsInfoDto.setUpdateDate(DateUtil.now());
			pbQualificationsInfoFacade.update(pbQualificationsInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, pbQualificationsInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbQualificationsInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String qualificationsOid = request.getParameter("qualificationsOid");
        try {
           if(StringUtils.isEmpty(qualificationsOid))
			{
				throw new ServiceException(null, "qualificationsOid is null");
			}
            pbQualificationsInfoFacade.delete(ObjectUtil.getValue(qualificationsOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "qualificationsOid=" + qualificationsOid);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "删除失败")).toString());
        }
        return null;
    }
    
    /**
     * 唯一验证
     * @param pbEducationLevelDegreeForm
     * @throws ServiceException
     * @throws Exception 
     */
	public ActionForward uniqueCheck(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception{
		//获取人员id,学历证书号,学位证书号
		String certificateNo = request.getParameter("certificateNo");
		if(!StringUtil.isBlank(certificateNo)){
			certificateNo = certificateNo.trim();
		}
		String isHighestLevel = request.getParameter("isHighestLevel");
		if(!StringUtil.isBlank(isHighestLevel)){
			isHighestLevel = isHighestLevel.trim();
		}
		String personOid = request.getParameter("personOid");
		String qualificationsOid = request.getParameter("qualificationsOid");
		
		String flag = "true";
		
		//根据人员id,获取该人员所有的学历学位信息
		List<PbQualificationsInfoDTO> list = pbQualificationsInfoFacade.listQualificationsInfoByPersonOid(NumberUtils.longValue(personOid));

		for(PbQualificationsInfoDTO dto: list){
			if(!dto.getQualificationsOid().toString().equals(qualificationsOid)){//修改时,跳过当前专业技术资格信息
				//判断资格证书编号是否重复
				if(!StringUtil.isBlank(certificateNo))
				{
					//如果资格证书编号号不为空
					if(certificateNo.equals(dto.getCertificateNo())){
						flag = "false";
					}
				}
				
				//判断是否是主要专业技术资格
				if(!StringUtil.isBlank(isHighestLevel))
				{
					if(!isHighestLevel.equals(DicConstants.YHRS0003_0)){//如果为0否,就跳过
						//如果不是是主要专业技术资格
						if(isHighestLevel.equals(dto.getIsHighestLevel())){
							flag = "false";
						}
					}
				}
			}
		}
		response.getWriter().write(flag);
		return null;
    }
}
