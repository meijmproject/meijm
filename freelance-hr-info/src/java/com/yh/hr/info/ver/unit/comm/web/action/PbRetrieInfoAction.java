/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-13
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import jade.workflow.utils.ObjectUtil;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.dictionary.utils.DicHelper;
import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.comm.facade.PbRetrieInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbRetrieInfoForm;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbRetrieInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.action.BaseAction;

public class PbRetrieInfoAction extends BaseAction {
	private PbRetrieInfoFacade pbRetrieInfoFacade = (PbRetrieInfoFacade) SpringBeanUtil.getBean("pbRetrieInfoFacade");

	//dto属性字典转换
	private void dtoDicMap(PbRetrieInfoDTO dto) throws ServiceException {
		dto.setRetrieTypeCode(DicHelper.viewName(DicConstants.YHRS0057,dto.getRetrieTypeCode()));
		dto.setRetrieReason(DicHelper.viewName(DicConstants.YHRS0058,dto.getRetrieReason()));
		dto.setRetireTreatmentLevelCode(DicHelper.viewName(DicConstants.YHRS0015,dto.getRetireTreatmentLevelCode()));
		dto.setRetireTreatmentTypeCode(DicHelper.viewName(DicConstants.YHRS0109,dto.getRetireTreatmentTypeCode()));
		dto.setRetirtPaymentUnit(DicHelper.viewName(DicConstants.YHRS0059,dto.getRetirtPaymentUnit()));
		dto.setSpecialContributionFlag(DicHelper.viewName(DicConstants.YHRS0003,dto.getSpecialContributionFlag()));
		dto.setIsNoChildForLife(DicHelper.viewName(DicConstants.YHRS0003,dto.getIsNoChildForLife()));
		dto.setApprovalType(DicHelper.viewName(DicConstants.YHRS0060,dto.getApprovalType()));
//		dto.setCompliedClause(DicHelper.viewName(DicConstants.YHRS0061,dto.getCompliedClause())); 20170406 duxw 按要求将符合条例改为录入
	}
	/**
	 * 列出所有 PbRetrieInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbRetrieInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbRetrieInfoForm", form);
	    }
        try {
        	List<PbRetrieInfoDTO> list = pbRetrieInfoFacade.find(ttb);
	        if(CollectionUtils.isNotEmpty(list)){
		        for(PbRetrieInfoDTO dto : list){
		        	dtoDicMap(dto);
		        }
		        request.setAttribute("list", list);
	        }
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbRetrieInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String personOid = request.getParameter("personOid");
        if (StringUtil.isBlank(personOid)) {
            personOid = ObjectUtil.getValue(request.getAttribute("personOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(personOid)) {
				throw new ServiceException("error.pk.invalid", "pbRetrieInfo personOid is null");
			}
            PbRetrieInfoDTO pbRetrieInfoDto = pbRetrieInfoFacade.get(ObjectUtil.getValue(personOid, java.lang.Long.class));
			if (null == pbRetrieInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			dtoDicMap(pbRetrieInfoDto);
			PbRetrieInfoForm pbRetrieInfoForm = BeanHelper.copyProperties(pbRetrieInfoDto, PbRetrieInfoForm.class);
			request.setAttribute("pbRetrieInfoForm", pbRetrieInfoForm);
            request.setAttribute("personOid", personOid);
		} catch (Exception se) {
			this.handleException(request, se, "personOid=" + personOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbRetrieInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		try
		{
			String personOid = request.getParameter("personOid");
			String urlId = request.getParameter("urlId");
			if(StringUtils.isEmpty(personOid))
			{
				throw new ServiceException("personOid is null");
			}
			if(StringUtils.isEmpty(urlId))
			{
				throw new ServiceException("urlId is null");
			}
			request.setAttribute("personOid", personOid);
			request.setAttribute("urlId", urlId);
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			return mapping.getInputForward();
		}
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbRetrieInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbRetrieInfoForm pbRetrieInfoForm = (PbRetrieInfoForm) form;
		try {
			TableTagBean ttb = TableTagBean.getFromRequest(request);
			ttb.getCondition().put("personOid", pbRetrieInfoForm.getPersonOid().toString());
			@SuppressWarnings("rawtypes")
			List list = pbRetrieInfoFacade.find(ttb);
			if(list!=null && list.size()>0) {
				throw new Exception("新增失败，该人员已经办理离退休");
			}
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbRetrieInfoDTO pbRetrieInfoDto = BeanHelper.copyProperties(pbRetrieInfoForm, PbRetrieInfoDTO.class);
//			pbRetrieInfoDto.setPersonOid(NumberUtils.longValue(personOid));
			pbRetrieInfoFacade.create(pbRetrieInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "新增失败")).toString());
			return null;
		}

		return null;
	}


	/**
	 * 跳转到 PbRetrieInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}

        String personOid = request.getParameter("personOid");
        String urlId = request.getParameter("urlId");

		try {
            if (StringUtils.isBlank(personOid)) {
				throw new ServiceException("error.pk.invalid", "pbRetrieInfo personOid is null");
			}
            PbRetrieInfoDTO pbRetrieInfoDto = pbRetrieInfoFacade.get(ObjectUtil.getValue(personOid, java.lang.Long.class));
			if (null == pbRetrieInfoDto) {
				throw new ServiceException("error.object.notfound", "pbRetrieInfo not found by personOid");
			}
			PbRetrieInfoForm pbRetrieInfoForm = BeanHelper.copyProperties(pbRetrieInfoDto, PbRetrieInfoForm.class);
			request.setAttribute("pbRetrieInfoForm", pbRetrieInfoForm);
            request.setAttribute("personOid", personOid);
            request.setAttribute("urlId", urlId);
		} catch (Exception se) {
			this.handleException(request, se, "personOid=" + personOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbRetrieInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbRetrieInfoForm pbRetrieInfoForm = (PbRetrieInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbRetrieInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String personOid = request.getParameter("personOid");
		PbRetrieInfoForm pbRetrieInfoForm = (PbRetrieInfoForm) form;
		try {
            if (StringUtils.isBlank(personOid)) {
				throw new ServiceException("error.pk.invalid", "pbRetrieInfo personOid is null");
			}
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbRetrieInfoDTO pbRetrieInfoDto = new PbRetrieInfoDTO();
			BeanHelper.copyProperties(pbRetrieInfoForm, pbRetrieInfoDto);
			pbRetrieInfoFacade.update(pbRetrieInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, pbRetrieInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbRetrieInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String personOid = request.getParameter("personOid");
        try {
           if(StringUtils.isEmpty(personOid))
			{
				throw new ServiceException(null, "personOid is null");
			}
            pbRetrieInfoFacade.delete(ObjectUtil.getValue(personOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "personOid=" + personOid);
            response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "删除失败")).toString());
            return mapping.getInputForward();
        }
        return null;
    }

}
