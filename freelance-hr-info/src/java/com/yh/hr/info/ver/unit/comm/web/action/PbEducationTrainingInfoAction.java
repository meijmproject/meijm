/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import jade.workflow.utils.ObjectUtil;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.dictionary.utils.DicHelper;
import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.comm.facade.PbEducationTrainingInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbEducationTrainingInfoForm;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbEducationTrainingInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbEducationTrainingInfoAction extends BaseAction {
	private PbEducationTrainingInfoFacade pbEducationTrainingInfoFacade = (PbEducationTrainingInfoFacade) SpringBeanUtil.getBean("pbEducationTrainingInfoFacade");

	/**
	 * 列出所有 PbEducationTrainingInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbEducationTraning(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbEducationTrainingInfoForm", form);
	    }
        try {
        	List<PbEducationTrainingInfoDTO> list = pbEducationTrainingInfoFacade.find(ttb);

            for(PbEducationTrainingInfoDTO dto: list){
            	if(StringUtils.isNotEmpty(dto.getEducationTrainingKinkCode()))
    			{
            		dto.setEducationTrainingKinkCode(DicHelper.viewName(DicConstants.YHRS0050, dto.getEducationTrainingKinkCode()));
    			}
            	if(StringUtils.isNotEmpty(dto.getTrainingType()))
    			{
            		dto.setTrainingType(DicHelper.viewName(DicConstants.YHRS0053, dto.getTrainingType()));
    			}
            	if(dto.getTrainingBeginDate()!=null)
    			{
            		dto.setTrainingBeginDateStr(DateUtil.format(dto.getTrainingBeginDate(), "yyyy-MM-dd"));
    			}
            	if(dto.getTrainingEndDate()!=null)
    			{
            		dto.setTrainingEndDateStr(DateUtil.format(dto.getTrainingEndDate(), "yyyy-MM-dd"));
    			}
            }

			request.setAttribute("list", list);
	        request.setAttribute("ttb", ttb);
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbEducationTrainingInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String educationTrainingOid = request.getParameter("educationTrainingOid");
        if (StringUtil.isBlank(educationTrainingOid)) {
            educationTrainingOid = ObjectUtil.getValue(request.getAttribute("educationTrainingOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(educationTrainingOid)) {
				throw new ServiceException("error.pk.invalid", "pbEducationTrainingInfo educationTrainingOid is null");
			}
            PbEducationTrainingInfoDTO pbEducationTrainingInfoDto = pbEducationTrainingInfoFacade.get(ObjectUtil.getValue(educationTrainingOid, java.lang.Long.class));
			if (null == pbEducationTrainingInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbEducationTrainingInfoForm pbEducationTrainingInfoForm = BeanHelper.copyProperties(pbEducationTrainingInfoDto, PbEducationTrainingInfoForm.class);
			pbEducationTrainingInfoForm.setTrainingBeginDateStr(DateUtil.format(pbEducationTrainingInfoForm.getTrainingBeginDate(), "yyyy-MM-dd"));
			pbEducationTrainingInfoForm.setTrainingEndDateStr(DateUtil.format(pbEducationTrainingInfoForm.getTrainingEndDate(), "yyyy-MM-dd"));
			pbEducationTrainingInfoForm.setApproveDateStr(DateUtil.format(pbEducationTrainingInfoForm.getApproveDate(), "yyyy-MM-dd"));
			request.setAttribute("pbEducationTrainingInfoForm", pbEducationTrainingInfoForm);
            request.setAttribute("educationTrainingOid", educationTrainingOid);
		} catch (Exception se) {
			this.handleException(request, se, "educationTrainingOid=" + educationTrainingOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbEducationTrainingInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		if(StringUtils.isEmpty(urlId))
		{
			throw new ServiceException("urlId is null");
		}
		if(StringUtils.isEmpty(personOid))
		{
			throw new ServiceException("personOid is null");
		}

		request.setAttribute("urlId", urlId);
		request.setAttribute("personOid", personOid);
		
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbEducationTrainingInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbEducationTrainingInfoForm pbEducationTrainingInfoForm = (PbEducationTrainingInfoForm) form;
		try {
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbEducationTrainingInfoDTO pbEducationTrainingInfoDto = BeanHelper.copyProperties(pbEducationTrainingInfoForm, PbEducationTrainingInfoDTO.class);
//			pbEducationTrainingInfoDto.setPersonOid(NumberUtils.longValue(personOid));
			pbEducationTrainingInfoDto.setCreateBy(UserContext.getLoginUserID());
			pbEducationTrainingInfoDto.setCreateName(UserContext.getLoginUserName());
			pbEducationTrainingInfoDto.setCreateDate(DateUtil.now());
			pbEducationTrainingInfoFacade.create(pbEducationTrainingInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbEducationTrainingInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		
		String urlId = request.getParameter("urlId");
        String educationTrainingOid = request.getParameter("educationTrainingOid");
        
		try {
            if(StringUtils.isEmpty(educationTrainingOid))
			{
				throw new ServiceException(null, "educationTrainingOid is null");
			}
			if(StringUtils.isEmpty(urlId))
			{
				throw new ServiceException(null, "urlId is null");
			}
            PbEducationTrainingInfoDTO pbEducationTrainingInfoDto = pbEducationTrainingInfoFacade.get(ObjectUtil.getValue(educationTrainingOid, java.lang.Long.class));
			if (null == pbEducationTrainingInfoDto) {
				throw new ServiceException("error.object.notfound", "pbEducationTrainingInfo not found by educationTrainingOid");
			}
			PbEducationTrainingInfoForm pbEducationTrainingInfoForm = BeanHelper.copyProperties(pbEducationTrainingInfoDto, PbEducationTrainingInfoForm.class);
			pbEducationTrainingInfoForm.setTrainingBeginDateStr(DateUtil.format(pbEducationTrainingInfoForm.getTrainingBeginDate(), "yyyy-MM-dd"));
			pbEducationTrainingInfoForm.setTrainingEndDateStr(DateUtil.format(pbEducationTrainingInfoForm.getTrainingEndDate(), "yyyy-MM-dd"));
			pbEducationTrainingInfoForm.setApproveDateStr(DateUtil.format(pbEducationTrainingInfoForm.getApproveDate(), "yyyy-MM-dd"));
			request.setAttribute("urlId", urlId);
			request.setAttribute("pbEducationTrainingInfoForm", pbEducationTrainingInfoForm);
            request.setAttribute("educationTrainingOid", educationTrainingOid);
		} catch (Exception se) {
			this.handleException(request, se, "educationTrainingOid=" + educationTrainingOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbEducationTrainingInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbEducationTrainingInfoForm pbEducationTrainingInfoForm = (PbEducationTrainingInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbEducationTrainingInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String educationTrainingOid = request.getParameter("educationTrainingOid");
		PbEducationTrainingInfoForm pbEducationTrainingInfoForm = (PbEducationTrainingInfoForm) form;
		try {
            if (StringUtils.isBlank(educationTrainingOid)) {
				throw new ServiceException("error.pk.invalid", "pbEducationTrainingInfo educationTrainingOid is null");
			}
            
            PbEducationTrainingInfoDTO pbEducationTrainingInfoDto = pbEducationTrainingInfoFacade.get(NumberUtils.longValue(educationTrainingOid));
			if(null == pbEducationTrainingInfoDto)
			{
				throw new ServiceException(null, "查询不到相关信息");
			}

			BeanHelper.copyProperties(pbEducationTrainingInfoForm, pbEducationTrainingInfoDto);
			pbEducationTrainingInfoDto.setUpdateBy(UserContext.getLoginUserID());
			pbEducationTrainingInfoDto.setUpdateName(UserContext.getLoginUserName());
			pbEducationTrainingInfoDto.setUpdateDate(DateUtil.now());
			pbEducationTrainingInfoFacade.update(pbEducationTrainingInfoDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, pbEducationTrainingInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbEducationTrainingInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String educationTrainingOid = request.getParameter("educationTrainingOid");
        try {
           if(StringUtils.isEmpty(educationTrainingOid))
			{
				throw new ServiceException(null, "educationTrainingOid is null");
			}
            pbEducationTrainingInfoFacade.delete(ObjectUtil.getValue(educationTrainingOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "educationTrainingOid=" + educationTrainingOid);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "删除失败")).toString());
        }
        return null;
    }

}
