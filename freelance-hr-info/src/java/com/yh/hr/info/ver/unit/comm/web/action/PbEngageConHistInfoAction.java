/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-13
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import jade.workflow.utils.ObjectUtil;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.taglib.TableTagBean;
import com.yh.hr.info.ver.unit.comm.facade.PbEngageConHistInfoFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbEngageConHistInfoForm;
import com.yh.hr.res.pb.dto.PbEngageConHistInfoDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbEngageConHistInfoAction extends BaseAction {
	private PbEngageConHistInfoFacade pbEngageConHistInfoFacade = (PbEngageConHistInfoFacade) SpringBeanUtil.getBean("pbEngageConHistInfoFacade");
	
	/**
	 * 列出所有 PbEngageConHistInfo信息
	 * 
	 * @param mapping 	 
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbContractChangeInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbEngageConHistInfoForm", form);
	    }
        try {
        	List<PbEngageConHistInfoDTO> list = pbEngageConHistInfoFacade.find(ttb);
        	List<PbEngageConHistInfoDTO> showList = new ArrayList<PbEngageConHistInfoDTO>();
			if(CollectionUtils.isNotEmpty(list))
			{
				for(PbEngageConHistInfoDTO dto : list)
				{
					PbEngageConHistInfoDTO showDto = new PbEngageConHistInfoDTO();
					BeanHelper.copyProperties(dto, showDto);
					if(null != dto.getContractBegin())
					{
						showDto.setContractBeginStr(DateUtil.format(dto.getContractBegin(), "yyyy-MM-dd"));
					}
					showList.add(showDto);
				}
			}
	        request.setAttribute("list", showList);
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}
        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbEngageConHistInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        String engageContractHistOid = request.getParameter("engageContractHistOid");
        if (StringUtil.isBlank(engageContractHistOid)) {
            engageContractHistOid = ObjectUtil.getValue(request.getAttribute("engageContractHistOid"), String.class);
        }
		try {
            if (StringUtils.isEmpty(engageContractHistOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageConHistInfo engageContractHistOid is null");
			}
            PbEngageConHistInfoDTO pbEngageConHistInfoDto = pbEngageConHistInfoFacade.get(ObjectUtil.getValue(engageContractHistOid, java.lang.Long.class));
			if (null == pbEngageConHistInfoDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbEngageConHistInfoForm pbEngageConHistInfoForm = BeanHelper.copyProperties(pbEngageConHistInfoDto, PbEngageConHistInfoForm.class);
			if(null != pbEngageConHistInfoForm.getContractBegin())
			{
				pbEngageConHistInfoForm.setContractBeginStr(DateUtil.format(pbEngageConHistInfoForm.getContractBegin(), "yyyy-MM-dd"));
			}
			request.setAttribute("engageConHistInfoForm", pbEngageConHistInfoForm);
            request.setAttribute("engageContractHistOid", engageContractHistOid);
		} catch (Exception se) {
			this.handleException(request, se, "engageContractHistOid=" + engageContractHistOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");
	}

	/**
	 * 跳转到 PbEngageConHistInfo信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		//参数校验，可根据实际情况修改
		PbEngageConHistInfoForm engageConHistInfoForm = (PbEngageConHistInfoForm)form;
		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		try
		{
			if(StringUtils.isEmpty(urlId)){
				throw new ServiceException("urlId is null");
			}
			if(StringUtils.isEmpty(personOid)){
				throw new ServiceException("personOid is null");
			}
			request.setAttribute("personOid", personOid);
			request.setAttribute("urlId", urlId);
			request.setAttribute("engageConHistInfoForm", engageConHistInfoForm);
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			return mapping.getInputForward();
		}
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbEngageConHistInfo信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbEngageConHistInfoForm pbEngageConHistInfoForm = (PbEngageConHistInfoForm) form;
		try {
//			if(StringUtils.isEmpty(${fkOid}))
//			{
//				throw new ServiceException("${fkOid} is null");
//			}
			PbEngageConHistInfoDTO pbEngageConHistInfoDto = BeanHelper.copyProperties(pbEngageConHistInfoForm, PbEngageConHistInfoDTO.class);
			if(StringUtils.isEmpty(pbEngageConHistInfoDto.getContractNo())){
//				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同编号为空！请刷新重试或联系开发人员！")).toString());
//				return null;
			}else if(null==pbEngageConHistInfoDto.getPersonOid()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的人员Id为null！请刷新重试或联系开发人员！")).toString());
				return null;
			}
			if(pbEngageConHistInfoFacade.checkContractNo(pbEngageConHistInfoDto)){
	//			pbEngageConHistInfoDto.setPersonOid(NumberUtils.longValue(personOid));
				pbEngageConHistInfoDto.setCreateBy(UserContext.getLoginUserID());
				pbEngageConHistInfoDto.setCreateName(UserContext.getLoginUserName());
				pbEngageConHistInfoDto.setCreateDate(DateUtil.now());
				pbEngageConHistInfoFacade.create(pbEngageConHistInfoDto);
				response.getWriter().write(JSONHelper.fromObject(true, null).toString());
			}else{
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"合同编号不能重复！")).toString());
				 return null;
			}
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbEngageConHistInfo信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}

        String engageContractHistOid = request.getParameter("engageContractHistOid");

		try {
            if (StringUtils.isBlank(engageContractHistOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageConHistInfo engageContractHistOid is null");
			}
            PbEngageConHistInfoDTO pbEngageConHistInfoDto = pbEngageConHistInfoFacade.get(ObjectUtil.getValue(engageContractHistOid, java.lang.Long.class));
			if (null == pbEngageConHistInfoDto) {
				throw new ServiceException("error.object.notfound", "pbEngageConHistInfo not found by engageContractHistOid");
			}
			PbEngageConHistInfoForm pbEngageConHistInfoForm = BeanHelper.copyProperties(pbEngageConHistInfoDto, PbEngageConHistInfoForm.class);
			if(null != pbEngageConHistInfoForm.getContractBegin())
			{
				pbEngageConHistInfoForm.setContractBeginStr(DateUtil.format(pbEngageConHistInfoForm.getContractBegin(), "yyyy-MM-dd"));
			}
			if(null != pbEngageConHistInfoForm.getContractEnd())
			{
				pbEngageConHistInfoForm.setContractEndStr(DateUtil.format(pbEngageConHistInfoForm.getContractEnd(), "yyyy-MM-dd"));
			}
			if(null != pbEngageConHistInfoForm.getContractEndActual())
			{
				pbEngageConHistInfoForm.setContractEndActualStr(DateUtil.format(pbEngageConHistInfoForm.getContractEndActual(), "yyyy-MM-dd"));
			}
			if(null != pbEngageConHistInfoForm.getSignDate())
			{
				pbEngageConHistInfoForm.setSignDateStr(DateUtil.format(pbEngageConHistInfoForm.getSignDate(), "yyyy-MM-dd"));
			}
			request.setAttribute("engageConHistInfoForm", pbEngageConHistInfoForm);
            request.setAttribute("engageContractHistOid", engageContractHistOid);
            request.setAttribute("urlId", request.getParameter("urlId"));
		} catch (Exception se) {
			this.handleException(request, se, "engageContractHistOid=" + engageContractHistOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbEngageConHistInfo信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbEngageConHistInfoForm pbEngageConHistInfoForm = (PbEngageConHistInfoForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbEngageConHistInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        String engageContractHistOid = request.getParameter("engageContractHistOid");
        String contractNoFlag = request.getParameter("contractNoFlag");
        Boolean contractNoBoolean = true;
		PbEngageConHistInfoForm pbEngageConHistInfoForm = (PbEngageConHistInfoForm) form;
		try {
            if (StringUtils.isBlank(engageContractHistOid)) {
				throw new ServiceException("error.pk.invalid", "pbEngageConHistInfo engageContractHistOid is null");
			}
			PbEngageConHistInfoDTO pbEngageConHistInfoDto = new PbEngageConHistInfoDTO();
			BeanHelper.copyProperties(pbEngageConHistInfoForm, pbEngageConHistInfoDto);
			if(StringUtils.isEmpty(pbEngageConHistInfoDto.getContractNo())){
				//response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的合同编号为空！请刷新重试或联系开发人员！")).toString());
				//return null;
			}else if(null==pbEngageConHistInfoDto.getPersonOid()){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"获取的人员Id为null！请刷新重试或联系开发人员！")).toString());
				return null;
			}
			//判断是否需要验证唯一性  
			//true为修改过，false为未修改
			if(StringUtils.isNotEmpty(contractNoFlag)&&contractNoFlag.equals("true")){
				contractNoBoolean = pbEngageConHistInfoFacade.checkContractNo(pbEngageConHistInfoDto);
			}else if(StringUtils.isNotEmpty(contractNoFlag)&&contractNoFlag.equals("false")){
			}else{
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"无法获得合同编号是否更改过，请刷新重试或联系开发人员！")).toString());
				 return null;
			}
			if(!contractNoBoolean){
				response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty( null,"合同编号不能重复！")).toString());
				 return null;
			}else{
				pbEngageConHistInfoDto.setUpdateBy(UserContext.getLoginUserID());
				pbEngageConHistInfoDto.setUpdateName(UserContext.getLoginUserName());
				pbEngageConHistInfoDto.setUpdateDate(DateUtil.now());
				pbEngageConHistInfoFacade.update(pbEngageConHistInfoDto);
				response.getWriter().write(JSONHelper.fromObject(true, null).toString());
			}
		} catch (Exception se) {
			this.handleException(request, se, pbEngageConHistInfoForm);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}

		return null;
	}



	/**
	 * 删除 PbEngageConHistInfo信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String engageContractHistOid = request.getParameter("engageContractHistOid");
        try {
           if(StringUtils.isEmpty(engageContractHistOid))
			{
				throw new ServiceException(null, "engageContractHistOid is null");
			}
            pbEngageConHistInfoFacade.delete(ObjectUtil.getValue(engageContractHistOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "engageContractHistOid=" + engageContractHistOid);
            return mapping.getInputForward();
        }
        return null;
    }

}
