/**
 * @desctiption   This file is generated by  code generation tool version 0.2 ^_^
 * @Created   2017-02-10
**/
package com.yh.hr.info.ver.unit.comm.web.action;

import com.yh.hr.info.ver.unit.comm.facade.PbEducationLevelDegreeFacade;
import com.yh.hr.info.ver.unit.comm.web.form.PbEducationLevelDegreeForm;
import jade.workflow.utils.ObjectUtil;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONObject;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import com.yh.component.dictionary.utils.DicHelper;
import com.yh.component.taglib.TableTagBean;
import com.yh.hr.res.dictionary.DicConstants;
import com.yh.hr.res.pb.dto.PbEducationLevelDegreeDTO;
import com.yh.platform.core.exception.ServiceException;
import com.yh.platform.core.util.BeanHelper;
import com.yh.platform.core.util.DateUtil;
import com.yh.platform.core.util.JSONHelper;
import com.yh.platform.core.util.NumberUtils;
import com.yh.platform.core.util.SpringBeanUtil;
import com.yh.platform.core.util.StringUtil;
import com.yh.platform.core.web.UserContext;
import com.yh.platform.core.web.action.BaseAction;

public class PbEducationLevelDegreeAction extends BaseAction {
	private PbEducationLevelDegreeFacade pbEducationLevelDegreeFacade = (PbEducationLevelDegreeFacade) SpringBeanUtil.getBean("pbEducationLevelDegreeFacade");

	/**
	 * 列出所有 PbEducationLevelDegree信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward listPbEducationLevelInfo(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		TableTagBean ttb = TableTagBean.getFromRequest(request);
		if (request.getMethod().equals("POST")) {
	        @SuppressWarnings("rawtypes")
			Map map = BeanUtils.describe(form);
	        ttb.getCondition().copyFrom(map, true);
	    } else {
	        BeanUtils.populate(form, ttb.getCondition());
	        request.setAttribute("pbEducationLevelDegreeForm", form);
	    }
        try {
        	List<PbEducationLevelDegreeDTO> list = pbEducationLevelDegreeFacade.find(ttb);
        	
			request.setAttribute("list", list);
	        request.setAttribute("ttb", ttb);
        } catch (Exception se) {
			this.handleException(request, se, null);
			return mapping.findForward("fail");
		}

        return mapping.findForward("success");
	}
	
	/**
	 * 查找单个PbEducationLevelDegree信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward show(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		
        String educationLevelOid = request.getParameter("educationLevelOid");
        
        if (StringUtil.isBlank(educationLevelOid)) {
            educationLevelOid = ObjectUtil.getValue(request.getAttribute("educationLevelOid"), String.class);
        }
		try
		{
			if (StringUtils.isEmpty(educationLevelOid)) {
				throw new ServiceException(null, "educationOid is null");
			}
			PbEducationLevelDegreeDTO pbEducationLevelDegreeDto = pbEducationLevelDegreeFacade.get(ObjectUtil.getValue(educationLevelOid, java.lang.Long.class));
			if (null == pbEducationLevelDegreeDto) {
				throw new ServiceException(null, "查询不到相关信息");
			}
			PbEducationLevelDegreeForm pbEducationLevelDegreeForm = BeanHelper.copyProperties(pbEducationLevelDegreeDto, PbEducationLevelDegreeForm.class);
			pbEducationLevelDegreeForm.setSchoolEnrollDateStr(DateUtil.format(pbEducationLevelDegreeForm.getSchoolEnrollDate(), "yyyy-MM-dd"));
			pbEducationLevelDegreeForm.setGraduateDateStr(DateUtil.format(pbEducationLevelDegreeForm.getGraduateDate(), "yyyy-MM-dd"));
			pbEducationLevelDegreeForm.setDegreeGrantDateStr(DateUtil.format(pbEducationLevelDegreeForm.getDegreeGrantDate(), "yyyy-MM-dd"));
			request.setAttribute("pbEducationLevelDegreeForm", pbEducationLevelDegreeForm);
            request.setAttribute("educationLevelOid", educationLevelOid);
            
		}
		catch(Exception se)
		{
			this.handleException(request, se, "educationLevelOid=" + educationLevelOid);
			return mapping.getInputForward();
		}
		return mapping.findForward("success");	
	}

	/**
	 * 跳转到 PbEducationLevelDegree信息添加页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goCreate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {

		String urlId = request.getParameter("urlId");
		String personOid = request.getParameter("personOid");
		if(StringUtils.isEmpty(urlId))
		{
			throw new ServiceException("urlId is null");
		}
		if(StringUtils.isEmpty(personOid))
		{
			throw new ServiceException("personOid is null");
		}

		request.setAttribute("urlId", urlId);
		request.setAttribute("personOid", personOid);
		
		return mapping.findForward(FORWARD_SUCCESS);
	}

	/**
	 * 添加 PbEducationLevelDegree信息
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward create(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if (this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		PbEducationLevelDegreeForm pbEducationLevelDegreeForm = (PbEducationLevelDegreeForm) form;
		try {
			
			PbEducationLevelDegreeDTO pbEducationLevelDegreeDto = BeanHelper.copyProperties(pbEducationLevelDegreeForm, PbEducationLevelDegreeDTO.class);
//			pbEducationLevelDegreeDto.setPersonOid(NumberUtils.longValue(personOid));
			pbEducationLevelDegreeDto.setCreateBy(UserContext.getLoginUserID());
			pbEducationLevelDegreeDto.setCreateName(UserContext.getLoginUserName());
			pbEducationLevelDegreeDto.setCreateDate(DateUtil.now());
			pbEducationLevelDegreeFacade.create(pbEducationLevelDegreeDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		} catch (Exception se) {
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "新增失败")).toString());
		}

		return null;
	}


	/**
	 * 跳转到 PbEducationLevelDegree信息修改（编辑）页面前的查询回显
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward goUpdate(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
		String urlId = request.getParameter("urlId");
        String educationLevelOid = request.getParameter("educationLevelOid");

		try {
			if(StringUtils.isEmpty(educationLevelOid))
			{
				throw new ServiceException(null, "educationOid is null");
			}
			if(StringUtils.isEmpty(urlId))
			{
				throw new ServiceException(null, "urlId is null");
			}
            PbEducationLevelDegreeDTO pbEducationLevelDegreeDto = pbEducationLevelDegreeFacade.get(ObjectUtil.getValue(educationLevelOid, java.lang.Long.class));
			if (null == pbEducationLevelDegreeDto) {
				throw new ServiceException("error.object.notfound", "pbEducationLevelDegree not found by educationLevelOid");
			}
			PbEducationLevelDegreeForm pbEducationLevelDegreeForm = BeanHelper.copyProperties(pbEducationLevelDegreeDto, PbEducationLevelDegreeForm.class);
			pbEducationLevelDegreeForm.setSchoolEnrollDateStr(DateUtil.format(pbEducationLevelDegreeForm.getSchoolEnrollDate(), "yyyy-MM-dd"));
			pbEducationLevelDegreeForm.setGraduateDateStr(DateUtil.format(pbEducationLevelDegreeForm.getGraduateDate(), "yyyy-MM-dd"));
			pbEducationLevelDegreeForm.setDegreeGrantDateStr(DateUtil.format(pbEducationLevelDegreeForm.getDegreeGrantDate(), "yyyy-MM-dd"));
			request.setAttribute("urlId", urlId);
			request.setAttribute("pbEducationLevelDegreeForm", pbEducationLevelDegreeForm);
            request.setAttribute("educationLevelOid", educationLevelOid);
		} catch (Exception se) {
			this.handleException(request, se, "educationLevelOid=" + educationLevelOid);
			return mapping.getInputForward();
		}
		return goUpdateView(mapping, form, request, response);
	}

	/**
	 * 跳转到 PbEducationLevelDegree信息修改（编辑）页面
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward goUpdateView(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
        //add jsp init values
        @SuppressWarnings("unused")
		PbEducationLevelDegreeForm pbEducationLevelDegreeForm = (PbEducationLevelDegreeForm) form;
        return mapping.findForward("success");
    }

	/**
	 * 更新 PbEducationLevelDegree信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
	public ActionForward update(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
		if(this.isCancelled(request)) {
			return mapping.findForward("cancel");
		}
        
		String educationLevelOid = request.getParameter("educationLevelOid");
		PbEducationLevelDegreeForm pbEducationLevelDegreeForm = (PbEducationLevelDegreeForm) form;
		try
		{
			if (StringUtils.isBlank(educationLevelOid)) {
				throw new ServiceException(null, "educationOid is null");
			}
			PbEducationLevelDegreeDTO pbEducationLevelDegreeDto = pbEducationLevelDegreeFacade.get(NumberUtils.longValue(educationLevelOid));
			if(null == pbEducationLevelDegreeDto)
			{
				throw new ServiceException(null, "查询不到相关信息");
			}
			BeanHelper.copyProperties(pbEducationLevelDegreeForm, pbEducationLevelDegreeDto);
			pbEducationLevelDegreeDto.setUpdateBy(UserContext.getLoginUserID());
			pbEducationLevelDegreeDto.setUpdateName(UserContext.getLoginUserName());
			pbEducationLevelDegreeDto.setUpdateDate(DateUtil.now());
			pbEducationLevelDegreeFacade.update(pbEducationLevelDegreeDto);
			response.getWriter().write(JSONHelper.fromObject(true, null).toString());
		}
		catch(Exception se)
		{
			this.handleException(request, se, null);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "修改失败")).toString());
		}
		return null;
	}



	/**
	 * 删除 PbEducationLevelDegree信息
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 */
    public ActionForward delete(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {
           String educationLevelOid = request.getParameter("educationLevelOid");
        try {
           if(StringUtils.isEmpty(educationLevelOid))
			{
				throw new ServiceException(null, "educationLevelOid is null");
			}
            pbEducationLevelDegreeFacade.delete(ObjectUtil.getValue(educationLevelOid, java.lang.Long.class));
            response.getWriter().write(JSONHelper.fromObject(true, null).toString());
        } catch (Exception se) {
            this.handleException(request, se, "educationLevelOid=" + educationLevelOid);
			response.getWriter().write(JSONHelper.fromObject(false, StringUtils.defaultIfEmpty(se.getMessage(), "删除失败")).toString());
        }
        return null;
    }
    
    /**
     * 唯一验证
     * @param pbEducationLevelDegreeForm
     * @throws ServiceException
     * @throws Exception 
     */
	public ActionForward uniqueCheck(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception{
		//获取人员id,学历证书号,学位证书号
		String educationCertificate = request.getParameter("educationCertificate");
		if(!StringUtil.isBlank(educationCertificate)){
			educationCertificate = educationCertificate.trim();
		}
		String degreeCertificateCode = request.getParameter("degreeCertificateCode");
		if(!StringUtil.isBlank(degreeCertificateCode)){
			degreeCertificateCode = degreeCertificateCode.trim();
		}
		String personOid = request.getParameter("personOid");
		String educationLevelOid = request.getParameter("educationLevelOid");
		
		String flag = "true";
		
		//根据人员id,获取该人员所有的学历学位信息
		List<PbEducationLevelDegreeDTO> list = pbEducationLevelDegreeFacade.listPbEducationInfoByPersonOid(NumberUtils.longValue(personOid));

		for(PbEducationLevelDegreeDTO dto: list){
			if(!dto.getEducationLevelOid().toString().equals(educationLevelOid)){//修改时,跳过当前学历学位信息
				//判断学历证书号是否重复
				if(!StringUtil.isBlank(educationCertificate))
				{
					//如果学历证书号不为空
					if(educationCertificate.equals(dto.getEducationCertificate())){
						flag = "false";
					}
				}
				
				//判断学位证书号是否重复
				if(!StringUtil.isBlank(degreeCertificateCode))
				{
					//如果学历证书号不为空
					if(degreeCertificateCode.equals(dto.getDegreeCertificateCode())){
						flag = "false";
					}
				}
			}
		}
		response.getWriter().write(flag);
		return null;
    }
	
	public ActionForward getEducationLevel(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception{
		//获取获取学历,学位的值
		String educationCode = request.getParameter("educationCode");
		String degreeCode = request.getParameter("degreeCode");

		String educationLevel = DicConstants.mappingEduLevel(educationCode, degreeCode);
		String educationLevelName = DicHelper.viewName(DicConstants.YHRS0041, educationLevel);
		JSONObject json = new JSONObject();
		json.put("educationLevel", educationLevel);
		json.put("educationLevelName", educationLevelName);
		response.getWriter().write(json.toString());
		return null;
		
	}
}
